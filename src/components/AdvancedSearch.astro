---
// Advanced Search and Filtering - Intelligent content discovery with AI-powered search
---

<div id="advanced-search" class="search-system">
  <!-- Search Interface -->
  <div class="search-container">
    <div class="search-input-wrapper">
      <div class="search-icon">
        <svg width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
          <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
        </svg>
      </div>
      <input 
        type="text" 
        id="search-input" 
        class="search-input" 
        placeholder="Search challenges, events, discussions..."
        autocomplete="off"
      >
      <div class="search-actions">
        <button id="voice-search" class="search-action-btn" title="Voice search">
          <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z"/>
            <path d="M10 8a2 2 0 1 1-4 0V3a2 2 0 1 1 4 0v5zM8 0a3 3 0 0 0-3 3v5a3 3 0 0 0 6 0V3a3 3 0 0 0-3-3z"/>
          </svg>
        </button>
        <button id="advanced-filters" class="search-action-btn" title="Advanced filters">
          <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5v-2z"/>
          </svg>
        </button>
        <button id="clear-search" class="search-action-btn" title="Clear search">
          <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854z"/>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Search Suggestions -->
    <div id="search-suggestions" class="search-suggestions">
      <!-- Dynamic suggestions will be inserted here -->
    </div>
    
    <!-- Quick Filters -->
    <div class="quick-filters">
      <div class="filter-group">
        <span class="filter-label">Quick:</span>
        <button class="filter-tag" data-filter="type:challenges">Challenges</button>
        <button class="filter-tag" data-filter="type:events">Events</button>
        <button class="filter-tag" data-filter="type:discussions">Discussions</button>
        <button class="filter-tag" data-filter="difficulty:beginner">Beginner</button>
        <button class="filter-tag" data-filter="tag:ml">Machine Learning</button>
      </div>
    </div>
  </div>
  
  <!-- Advanced Filters Panel -->
  <div id="filters-panel" class="filters-panel">
    <div class="filters-header">
      <h4>Advanced Filters</h4>
      <button id="close-filters" class="close-button">
        <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
          <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854z"/>
        </svg>
      </button>
    </div>
    
    <div class="filters-content">
      <div class="filter-section">
        <h5>Content Type</h5>
        <div class="filter-options">
          <label class="filter-checkbox">
            <input type="checkbox" value="challenges" checked>
            <span>Challenges</span>
          </label>
          <label class="filter-checkbox">
            <input type="checkbox" value="events" checked>
            <span>Events</span>
          </label>
          <label class="filter-checkbox">
            <input type="checkbox" value="discussions" checked>
            <span>Discussions</span>
          </label>
          <label class="filter-checkbox">
            <input type="checkbox" value="resources" checked>
            <span>Resources</span>
          </label>
        </div>
      </div>
      
      <div class="filter-section">
        <h5>Difficulty Level</h5>
        <div class="difficulty-filter">
          <div class="difficulty-range">
            <input type="range" id="difficulty-min" min="1" max="5" value="1">
            <input type="range" id="difficulty-max" min="1" max="5" value="5">
          </div>
          <div class="difficulty-labels">
            <span>Beginner</span>
            <span>Expert</span>
          </div>
        </div>
      </div>
      
      <div class="filter-section">
        <h5>Tags & Topics</h5>
        <div class="tags-filter">
          <div class="popular-tags">
            <span class="tag-filter" data-tag="ml">Machine Learning</span>
            <span class="tag-filter" data-tag="nlp">NLP</span>
            <span class="tag-filter" data-tag="cv">Computer Vision</span>
            <span class="tag-filter" data-tag="robotics">Robotics</span>
            <span class="tag-filter" data-tag="ethics">AI Ethics</span>
            <span class="tag-filter" data-tag="research">Research</span>
          </div>
          <input type="text" id="custom-tags" placeholder="Add custom tags..." class="custom-tags-input">
        </div>
      </div>
      
      <div class="filter-section">
        <h5>Date Range</h5>
        <div class="date-filter">
          <select id="date-range" class="date-select">
            <option value="all">All time</option>
            <option value="today">Today</option>
            <option value="week">This week</option>
            <option value="month">This month</option>
            <option value="year">This year</option>
            <option value="custom">Custom range</option>
          </select>
          <div id="custom-date-inputs" class="custom-date-inputs" style="display: none;">
            <input type="date" id="start-date" class="date-input">
            <input type="date" id="end-date" class="date-input">
          </div>
        </div>
      </div>
      
      <div class="filter-section">
        <h5>Sort Options</h5>
        <div class="sort-options">
          <select id="sort-by" class="sort-select">
            <option value="relevance">Relevance</option>
            <option value="date">Date</option>
            <option value="popularity">Popularity</option>
            <option value="difficulty">Difficulty</option>
            <option value="title">Title (A-Z)</option>
          </select>
          <label class="sort-direction">
            <input type="checkbox" id="sort-desc" checked>
            <span>Descending</span>
          </label>
        </div>
      </div>
      
      <div class="filter-actions">
        <button id="apply-filters" class="apply-button">Apply Filters</button>
        <button id="reset-filters" class="reset-button">Reset</button>
      </div>
    </div>
  </div>
  
  <!-- Search Results -->
  <div id="search-results" class="search-results">
    <div class="results-header">
      <div class="results-info">
        <span id="results-count">0</span>
        <span class="results-text">results</span>
        <span id="search-time" class="search-time"></span>
      </div>
      <div class="results-actions">
        <button id="save-search" class="results-action" title="Save search">
          <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
            <path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v14a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.315A.5.5 0 0 1 2 15V1z"/>
          </svg>
        </button>
        <button id="export-results" class="results-action" title="Export results">
          <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
            <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
            <path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708l3-3z"/>
          </svg>
        </button>
      </div>
    </div>
    
    <div id="results-container" class="results-container">
      <!-- Search results will be rendered here -->
    </div>
    
    <div id="search-loading" class="search-loading">
      <div class="loading-animation">
        <div class="search-spinner"></div>
        <span>Searching...</span>
      </div>
    </div>
    
    <div id="no-results" class="no-results" style="display: none;">
      <div class="no-results-icon">üîç</div>
      <h4>No results found</h4>
      <p>Try adjusting your search terms or filters</p>
      <div class="search-suggestions-text">
        <span>Suggestions:</span>
        <ul id="search-suggestions-list">
          <!-- Dynamic suggestions will be added here -->
        </ul>
      </div>
    </div>
  </div>
  
  <div id="filters-overlay" class="filters-overlay"></div>
</div>

<script>
  class AdvancedSearchSystem {
    constructor() {
      this.searchInput = document.getElementById('search-input');
      this.searchSuggestions = document.getElementById('search-suggestions');
      this.filtersPanel = document.getElementById('filters-panel');
      this.filtersOverlay = document.getElementById('filters-overlay');
      this.searchResults = document.getElementById('search-results');
      this.resultsContainer = document.getElementById('results-container');
      this.searchLoading = document.getElementById('search-loading');
      this.noResults = document.getElementById('no-results');
      
      this.searchHistory = this.loadSearchHistory();
      this.savedSearches = this.loadSavedSearches();
      this.currentQuery = '';
      this.currentFilters = this.getDefaultFilters();
      this.searchCache = new Map();
      this.debounceTimer = null;
      this.isVoiceSearchActive = false;
      
      this.mockData = this.generateMockData();
      
      this.init();
    }
    
    async init() {
      this.setupEventListeners();
      this.setupVoiceSearch();
      this.loadRecentSearches();
      this.setupKeyboardShortcuts();
    }
    
    generateMockData() {
      return [
        {
          id: 'ml-fundamentals',
          title: 'Machine Learning Fundamentals',
          type: 'challenges',
          description: 'Learn the core concepts of machine learning algorithms and data preprocessing techniques.',
          difficulty: 2,
          tags: ['ml', 'beginner', 'algorithms'],
          date: '2025-07-15',
          popularity: 156,
          author: 'Dr. Sarah Chen',
          estimatedTime: '2-3 hours'
        },
        {
          id: 'nlp-workshop',
          title: 'Natural Language Processing Workshop',
          type: 'events',
          description: 'Hands-on workshop covering modern NLP techniques and transformer models.',
          difficulty: 3,
          tags: ['nlp', 'workshop', 'transformers'],
          date: '2025-07-28',
          popularity: 89,
          author: 'AI Research Team',
          location: 'Virtual Event'
        },
        {
          id: 'ai-ethics-discussion',
          title: 'AI Ethics in Modern Applications',
          type: 'discussions',
          description: 'Community discussion on ethical considerations in AI development and deployment.',
          difficulty: 2,
          tags: ['ethics', 'discussion', 'society'],
          date: '2025-07-20',
          popularity: 234,
          author: 'Ethics Committee',
          replies: 45
        },
        {
          id: 'computer-vision-challenge',
          title: 'Advanced Computer Vision Challenge',
          type: 'challenges',
          description: 'Build a state-of-the-art computer vision system for object detection and recognition.',
          difficulty: 4,
          tags: ['cv', 'deeplearning', 'opencv'],
          date: '2025-07-10',
          popularity: 78,
          author: 'Vision Lab',
          estimatedTime: '4-6 hours'
        },
        {
          id: 'robotics-primer',
          title: 'Introduction to AI Robotics',
          type: 'resources',
          description: 'Comprehensive guide to robotics fundamentals and AI integration.',
          difficulty: 3,
          tags: ['robotics', 'ai', 'guide'],
          date: '2025-07-05',
          popularity: 123,
          author: 'Robotics Institute',
          pages: 45
        },
        {
          id: 'research-symposium',
          title: 'AI Research Symposium 2025',
          type: 'events',
          description: 'Annual symposium featuring cutting-edge AI research presentations.',
          difficulty: 4,
          tags: ['research', 'symposium', 'academia'],
          date: '2025-08-15',
          popularity: 312,
          author: 'Research Committee',
          location: 'Main Auditorium'
        }
      ];
    }
    
    setupEventListeners() {
      // Search input events
      this.searchInput.addEventListener('input', this.handleSearchInput.bind(this));
      this.searchInput.addEventListener('focus', this.showSearchSuggestions.bind(this));
      this.searchInput.addEventListener('keydown', this.handleSearchKeydown.bind(this));
      
      // Search action buttons
      document.getElementById('voice-search').addEventListener('click', this.toggleVoiceSearch.bind(this));
      document.getElementById('advanced-filters').addEventListener('click', this.openFiltersPanel.bind(this));
      document.getElementById('clear-search').addEventListener('click', this.clearSearch.bind(this));
      
      // Quick filters
      document.querySelectorAll('.filter-tag').forEach(tag => {
        tag.addEventListener('click', this.applyQuickFilter.bind(this));
      });
      
      // Filters panel
      document.getElementById('close-filters').addEventListener('click', this.closeFiltersPanel.bind(this));
      document.getElementById('apply-filters').addEventListener('click', this.applyAdvancedFilters.bind(this));
      document.getElementById('reset-filters').addEventListener('click', this.resetFilters.bind(this));
      this.filtersOverlay.addEventListener('click', this.closeFiltersPanel.bind(this));
      
      // Results actions
      document.getElementById('save-search').addEventListener('click', this.saveCurrentSearch.bind(this));
      document.getElementById('export-results').addEventListener('click', this.exportResults.bind(this));
      
      // Filter interactions
      document.getElementById('date-range').addEventListener('change', this.handleDateRangeChange.bind(this));
      
      // Tag filters
      document.querySelectorAll('.tag-filter').forEach(tag => {
        tag.addEventListener('click', this.toggleTagFilter.bind(this));
      });
      
      // Custom tags input
      document.getElementById('custom-tags').addEventListener('keydown', this.handleCustomTags.bind(this));
      
      // Close suggestions when clicking outside
      document.addEventListener('click', (e) => {
        if (!e.target.closest('.search-container')) {
          this.hideSearchSuggestions();
        }
      });
    }
    
    setupVoiceSearch() {
      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        this.recognition = new SpeechRecognition();
        this.recognition.continuous = false;
        this.recognition.interimResults = false;
        this.recognition.lang = 'en-US';
        
        this.recognition.onresult = (event) => {
          const transcript = event.results[0][0].transcript;
          this.searchInput.value = transcript;
          this.handleSearchInput();
          this.isVoiceSearchActive = false;
          this.updateVoiceSearchButton();
        };
        
        this.recognition.onerror = () => {
          this.isVoiceSearchActive = false;
          this.updateVoiceSearchButton();
        };
        
        this.recognition.onend = () => {
          this.isVoiceSearchActive = false;
          this.updateVoiceSearchButton();
        };
      } else {
        document.getElementById('voice-search').style.display = 'none';
      }
    }
    
    setupKeyboardShortcuts() {
      document.addEventListener('keydown', (e) => {
        // Ctrl/Cmd + K to focus search
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
          e.preventDefault();
          this.searchInput.focus();
        }
        
        // Escape to clear search
        if (e.key === 'Escape') {
          if (this.searchInput === document.activeElement) {
            this.clearSearch();
          }
          this.hideSearchSuggestions();
          this.closeFiltersPanel();
        }
      });
    }
    
    handleSearchInput() {
      const query = this.searchInput.value.trim();
      this.currentQuery = query;
      
      // Debounce search
      clearTimeout(this.debounceTimer);
      this.debounceTimer = setTimeout(() => {
        if (query.length > 0) {
          this.performSearch(query);
          this.updateSearchSuggestions(query);
        } else {
          this.clearResults();
          this.showRecentSearches();
        }
      }, 300);
    }
    
    handleSearchKeydown(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        this.hideSearchSuggestions();
        if (this.currentQuery) {
          this.addToSearchHistory(this.currentQuery);
          this.performSearch(this.currentQuery);
        }
      } else if (e.key === 'ArrowDown') {
        e.preventDefault();
        this.navigateSuggestions('down');
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        this.navigateSuggestions('up');
      }
    }
    
    async performSearch(query, filters = null) {
      const searchFilters = filters || this.currentFilters;
      const cacheKey = `${query}:${JSON.stringify(searchFilters)}`;
      
      // Check cache first
      if (this.searchCache.has(cacheKey)) {
        const results = this.searchCache.get(cacheKey);
        this.displayResults(results, query);
        return;
      }
      
      this.showSearchLoading();
      const startTime = Date.now();
      
      try {
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const results = this.searchContent(query, searchFilters);
        const searchTime = Date.now() - startTime;
        
        // Cache results
        this.searchCache.set(cacheKey, results);
        
        this.displayResults(results, query, searchTime);
        
      } catch (error) {
        console.error('Search error:', error);
        this.showSearchError();
      }
    }
    
    searchContent(query, filters) {
      let results = [...this.mockData];
      
      // Text search
      if (query) {
        const searchTerms = query.toLowerCase().split(' ');
        results = results.filter(item => {
          const searchableText = `${item.title} ${item.description} ${item.tags.join(' ')} ${item.author}`.toLowerCase();
          return searchTerms.every(term => searchableText.includes(term));
        });
      }
      
      // Apply filters
      if (filters.types && filters.types.length > 0) {
        results = results.filter(item => filters.types.includes(item.type));
      }
      
      if (filters.difficulty) {
        results = results.filter(item => 
          item.difficulty >= filters.difficulty.min && 
          item.difficulty <= filters.difficulty.max
        );
      }
      
      if (filters.tags && filters.tags.length > 0) {
        results = results.filter(item =>
          filters.tags.some(tag => item.tags.includes(tag))
        );
      }
      
      if (filters.dateRange && filters.dateRange !== 'all') {
        results = this.filterByDateRange(results, filters.dateRange);
      }
      
      // Sort results
      results = this.sortResults(results, filters.sortBy, filters.sortDesc);
      
      // Calculate relevance scores
      results = results.map(item => ({
        ...item,
        relevanceScore: this.calculateRelevanceScore(item, query, filters)
      }));
      
      return results;
    }
    
    calculateRelevanceScore(item, query, filters) {
      let score = 0;
      
      if (query) {
        const queryLower = query.toLowerCase();
        
        // Title match (highest weight)
        if (item.title.toLowerCase().includes(queryLower)) score += 50;
        
        // Description match
        if (item.description.toLowerCase().includes(queryLower)) score += 30;
        
        // Tag match
        if (item.tags.some(tag => tag.toLowerCase().includes(queryLower))) score += 20;
        
        // Author match
        if (item.author.toLowerCase().includes(queryLower)) score += 10;
      }
      
      // Popularity boost
      score += Math.min(item.popularity / 10, 20);
      
      // Recent content boost
      const daysSinceCreation = (Date.now() - new Date(item.date).getTime()) / (1000 * 60 * 60 * 24);
      if (daysSinceCreation < 7) score += 15;
      else if (daysSinceCreation < 30) score += 10;
      
      return Math.round(score);
    }
    
    sortResults(results, sortBy, descending = true) {
      const sortFunctions = {
        relevance: (a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0),
        date: (a, b) => new Date(b.date) - new Date(a.date),
        popularity: (a, b) => b.popularity - a.popularity,
        difficulty: (a, b) => b.difficulty - a.difficulty,
        title: (a, b) => a.title.localeCompare(b.title)
      };
      
      const sortFn = sortFunctions[sortBy] || sortFunctions.relevance;
      results.sort(sortFn);
      
      if (sortBy !== 'title' && !descending) {
        results.reverse();
      }
      
      return results;
    }
    
    filterByDateRange(results, range) {
      const now = new Date();
      const startDate = new Date();
      
      switch (range) {
        case 'today':
          startDate.setHours(0, 0, 0, 0);
          break;
        case 'week':
          startDate.setDate(now.getDate() - 7);
          break;
        case 'month':
          startDate.setMonth(now.getMonth() - 1);
          break;
        case 'year':
          startDate.setFullYear(now.getFullYear() - 1);
          break;
        default:
          return results;
      }
      
      return results.filter(item => new Date(item.date) >= startDate);
    }
    
    displayResults(results, query, searchTime = 0) {
      this.hideSearchLoading();
      
      // Update results info
      document.getElementById('results-count').textContent = results.length;
      document.getElementById('search-time').textContent = 
        searchTime > 0 ? `(${searchTime}ms)` : '';
      
      if (results.length === 0) {
        this.showNoResults(query);
        return;
      }
      
      this.noResults.style.display = 'none';
      this.resultsContainer.innerHTML = results.map(result => 
        this.createResultCard(result)
      ).join('');
      
      this.searchResults.style.display = 'block';
      
      // Animate result cards
      this.animateResults();
    }
    
    createResultCard(result) {
      const typeIcons = {
        challenges: 'üèÜ',
        events: 'üìÖ',
        discussions: 'üí¨',
        resources: 'üìö'
      };
      
      const difficultyStars = '‚òÖ'.repeat(result.difficulty) + '‚òÜ'.repeat(5 - result.difficulty);
      
      return `
        <div class="result-card" data-id="${result.id}">
          <div class="result-header">
            <div class="result-type">
              <span class="type-icon">${typeIcons[result.type]}</span>
              <span class="type-label">${result.type}</span>
            </div>
            <div class="result-score" title="Relevance Score: ${result.relevanceScore}%">
              <div class="score-indicator">
                <div class="score-fill" style="width: ${Math.min(result.relevanceScore, 100)}%"></div>
              </div>
            </div>
          </div>
          
          <div class="result-content">
            <h3 class="result-title">
              <a href="/${result.type}/${result.id}">${result.title}</a>
            </h3>
            <p class="result-description">${result.description}</p>
            
            <div class="result-metadata">
              <div class="result-difficulty" title="Difficulty: ${result.difficulty}/5">
                <span class="difficulty-stars">${difficultyStars}</span>
              </div>
              <div class="result-author">by ${result.author}</div>
              <div class="result-date">${this.formatDate(result.date)}</div>
              <div class="result-popularity">
                <svg width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
                </svg>
                ${result.popularity}
              </div>
            </div>
            
            <div class="result-tags">
              ${result.tags.map(tag => `
                <span class="result-tag" data-tag="${tag}">${tag}</span>
              `).join('')}
            </div>
          </div>
          
          <div class="result-actions">
            <button class="result-action" data-action="bookmark" title="Bookmark">
              <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                <path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v14a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.315A.5.5 0 0 1 2 15V1z"/>
              </svg>
            </button>
            <button class="result-action" data-action="share" title="Share">
              <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                <path d="M11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.499 2.499 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5z"/>
              </svg>
            </button>
          </div>
        </div>
      `;
    }
    
    animateResults() {
      const cards = this.resultsContainer.querySelectorAll('.result-card');
      cards.forEach((card, index) => {
        card.style.animationDelay = `${index * 0.1}s`;
        card.classList.add('result-fade-in');
      });
    }
    
    showSearchLoading() {
      this.searchLoading.style.display = 'flex';
      this.resultsContainer.style.display = 'none';
      this.noResults.style.display = 'none';
    }
    
    hideSearchLoading() {
      this.searchLoading.style.display = 'none';
      this.resultsContainer.style.display = 'block';
    }
    
    showNoResults(query) {
      this.noResults.style.display = 'block';
      this.resultsContainer.style.display = 'none';
      
      // Generate search suggestions
      const suggestions = this.generateSearchSuggestions(query);
      const suggestionsList = document.getElementById('search-suggestions-list');
      suggestionsList.innerHTML = suggestions.map(suggestion => 
        `<li><button class="suggestion-link" data-query="${suggestion}">${suggestion}</button></li>`
      ).join('');
      
      // Add event listeners to suggestions
      suggestionsList.querySelectorAll('.suggestion-link').forEach(link => {
        link.addEventListener('click', (e) => {
          this.searchInput.value = e.target.dataset.query;
          this.performSearch(e.target.dataset.query);
        });
      });
    }
    
    generateSearchSuggestions(query) {
      const commonTerms = ['machine learning', 'deep learning', 'neural networks', 'computer vision', 'nlp', 'robotics'];
      return commonTerms.filter(term => 
        term.toLowerCase().includes(query.toLowerCase()) || 
        query.toLowerCase().includes(term.toLowerCase())
      ).slice(0, 3);
    }
    
    // Additional methods for various functionalities...
    
    toggleVoiceSearch() {
      if (!this.recognition) return;
      
      if (this.isVoiceSearchActive) {
        this.recognition.stop();
      } else {
        this.recognition.start();
        this.isVoiceSearchActive = true;
        this.updateVoiceSearchButton();
      }
    }
    
    updateVoiceSearchButton() {
      const button = document.getElementById('voice-search');
      if (this.isVoiceSearchActive) {
        button.classList.add('recording');
      } else {
        button.classList.remove('recording');
      }
    }
    
    openFiltersPanel() {
      this.filtersPanel.classList.add('panel-open');
      this.filtersOverlay.classList.add('overlay-active');
    }
    
    closeFiltersPanel() {
      this.filtersPanel.classList.remove('panel-open');
      this.filtersOverlay.classList.remove('overlay-active');
    }
    
    clearSearch() {
      this.searchInput.value = '';
      this.currentQuery = '';
      this.clearResults();
      this.hideSearchSuggestions();
    }
    
    clearResults() {
      this.searchResults.style.display = 'none';
      this.resultsContainer.innerHTML = '';
    }
    
    getDefaultFilters() {
      return {
        types: ['challenges', 'events', 'discussions', 'resources'],
        difficulty: { min: 1, max: 5 },
        tags: [],
        dateRange: 'all',
        sortBy: 'relevance',
        sortDesc: true
      };
    }
    
    loadSearchHistory() {
      const saved = localStorage.getItem('search-history');
      return saved ? JSON.parse(saved) : [];
    }
    
    addToSearchHistory(query) {
      if (!this.searchHistory.includes(query)) {
        this.searchHistory.unshift(query);
        this.searchHistory = this.searchHistory.slice(0, 10); // Keep only 10 recent searches
        localStorage.setItem('search-history', JSON.stringify(this.searchHistory));
      }
    }
    
    loadSavedSearches() {
      const saved = localStorage.getItem('saved-searches');
      return saved ? JSON.parse(saved) : [];
    }
    
    formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric',
        year: 'numeric'
      });
    }
    
    // Placeholder methods for remaining functionality
    updateSearchSuggestions(query) { /* Implementation */ }
    showSearchSuggestions() { /* Implementation */ }
    hideSearchSuggestions() { /* Implementation */ }
    showRecentSearches() { /* Implementation */ }
    navigateSuggestions(direction) { /* Implementation */ }
    applyQuickFilter(e) { /* Implementation */ }
    applyAdvancedFilters() { /* Implementation */ }
    resetFilters() { /* Implementation */ }
    handleDateRangeChange() { /* Implementation */ }
    toggleTagFilter(e) { /* Implementation */ }
    handleCustomTags(e) { /* Implementation */ }
    saveCurrentSearch() { /* Implementation */ }
    exportResults() { /* Implementation */ }
    showSearchError() { /* Implementation */ }
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new AdvancedSearchSystem();
  });
</script>

<style>
  .search-system {
    background: white;
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-lg);
    box-shadow: var(--premium-shadow-sm);
    overflow: hidden;
  }
  
  .search-container {
    padding: var(--premium-space-lg);
    border-bottom: 1px solid var(--premium-glass-border);
  }
  
  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    background: var(--premium-gray-50);
    border: 2px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-xl);
    transition: all var(--premium-transition-normal);
  }
  
  .search-input-wrapper:focus-within {
    border-color: var(--premium-primary);
    background: white;
    box-shadow: 0 0 0 4px rgba(var(--premium-primary-rgb), 0.1);
  }
  
  .search-icon {
    display: flex;
    align-items: center;
    padding: 0 var(--premium-space-md);
    color: var(--premium-gray-500);
  }
  
  .search-input {
    flex: 1;
    padding: var(--premium-space-md) 0;
    border: none;
    background: none;
    font-size: 1rem;
    color: var(--premium-gray-800);
    outline: none;
  }
  
  .search-input::placeholder {
    color: var(--premium-gray-500);
  }
  
  .search-actions {
    display: flex;
    align-items: center;
    gap: var(--premium-space-xs);
    padding: 0 var(--premium-space-sm);
  }
  
  .search-action-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    background: none;
    border: none;
    border-radius: var(--premium-radius-md);
    color: var(--premium-gray-500);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .search-action-btn:hover {
    background: var(--premium-gray-200);
    color: var(--premium-primary);
  }
  
  .search-action-btn.recording {
    background: var(--premium-error);
    color: white;
    animation: recordingPulse 1s ease-in-out infinite;
  }
  
  @keyframes recordingPulse {
    0%, 100% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.8; transform: scale(1.1); }
  }
  
  .search-suggestions {
    position: absolute;
    top: calc(100% + var(--premium-space-xs));
    left: 0;
    right: 0;
    background: white;
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-lg);
    box-shadow: var(--premium-shadow-xl);
    z-index: 1000;
    max-height: 300px;
    overflow-y: auto;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all var(--premium-transition-normal);
  }
  
  .search-suggestions.visible {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .quick-filters {
    margin-top: var(--premium-space-md);
  }
  
  .filter-group {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
    flex-wrap: wrap;
  }
  
  .filter-label {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--premium-gray-600);
  }
  
  .filter-tag {
    padding: var(--premium-space-xs) var(--premium-space-sm);
    background: var(--premium-gray-100);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-full);
    font-size: 0.8rem;
    color: var(--premium-gray-700);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .filter-tag:hover {
    background: var(--premium-primary);
    color: white;
    border-color: var(--premium-primary);
  }
  
  .filter-tag.active {
    background: var(--premium-primary);
    color: white;
    border-color: var(--premium-primary);
  }
  
  /* Filters Panel */
  .filters-panel {
    position: fixed;
    top: 50%;
    left: 50%;
    width: 90vw;
    max-width: 500px;
    max-height: 80vh;
    background: white;
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-lg);
    box-shadow: var(--premium-shadow-xl);
    transform: translate(-50%, -50%) scale(0.9);
    opacity: 0;
    visibility: hidden;
    transition: all var(--premium-transition-normal);
    z-index: 10000;
    overflow: hidden;
  }
  
  .panel-open {
    transform: translate(-50%, -50%) scale(1);
    opacity: 1;
    visibility: visible;
  }
  
  .filters-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--premium-space-lg);
    background: var(--premium-gradient-primary);
    color: white;
  }
  
  .filters-header h4 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
  }
  
  .close-button {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: var(--premium-space-xs);
    border-radius: var(--premium-radius-sm);
    transition: background var(--premium-transition-fast);
  }
  
  .close-button:hover {
    background: rgba(255, 255, 255, 0.2);
  }
  
  .filters-content {
    padding: var(--premium-space-lg);
    max-height: calc(80vh - 80px);
    overflow-y: auto;
  }
  
  .filter-section {
    margin-bottom: var(--premium-space-lg);
  }
  
  .filter-section:last-child {
    margin-bottom: 0;
  }
  
  .filter-section h5 {
    margin: 0 0 var(--premium-space-sm);
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .filter-options {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--premium-space-sm);
  }
  
  .filter-checkbox {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
    font-size: 0.875rem;
    color: var(--premium-gray-700);
    cursor: pointer;
  }
  
  .difficulty-filter {
    position: relative;
  }
  
  .difficulty-range {
    display: flex;
    gap: var(--premium-space-sm);
    margin-bottom: var(--premium-space-sm);
  }
  
  .difficulty-range input[type="range"] {
    flex: 1;
    height: 4px;
    background: var(--premium-gray-200);
    border-radius: 2px;
    outline: none;
    -webkit-appearance: none;
  }
  
  .difficulty-range input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 16px;
    height: 16px;
    background: var(--premium-primary);
    border-radius: 50%;
    cursor: pointer;
  }
  
  .difficulty-labels {
    display: flex;
    justify-content: space-between;
    font-size: 0.8rem;
    color: var(--premium-gray-500);
  }
  
  .popular-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--premium-space-xs);
    margin-bottom: var(--premium-space-sm);
  }
  
  .tag-filter {
    padding: var(--premium-space-xs) var(--premium-space-sm);
    background: var(--premium-gray-100);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-md);
    font-size: 0.8rem;
    color: var(--premium-gray-700);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .tag-filter:hover {
    background: var(--premium-gray-200);
  }
  
  .tag-filter.selected {
    background: var(--premium-primary);
    color: white;
    border-color: var(--premium-primary);
  }
  
  .custom-tags-input {
    width: 100%;
    padding: var(--premium-space-sm);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-md);
    font-size: 0.875rem;
    outline: none;
    transition: border-color var(--premium-transition-normal);
  }
  
  .custom-tags-input:focus {
    border-color: var(--premium-primary);
  }
  
  .date-select, .sort-select {
    width: 100%;
    padding: var(--premium-space-sm);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-md);
    background: white;
    font-size: 0.875rem;
    outline: none;
  }
  
  .custom-date-inputs {
    display: flex;
    gap: var(--premium-space-sm);
    margin-top: var(--premium-space-sm);
  }
  
  .date-input {
    flex: 1;
    padding: var(--premium-space-sm);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-md);
    font-size: 0.875rem;
    outline: none;
  }
  
  .sort-options {
    display: flex;
    align-items: center;
    gap: var(--premium-space-md);
  }
  
  .sort-direction {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
    font-size: 0.875rem;
    color: var(--premium-gray-700);
    cursor: pointer;
  }
  
  .filter-actions {
    display: flex;
    gap: var(--premium-space-md);
    margin-top: var(--premium-space-lg);
    padding-top: var(--premium-space-lg);
    border-top: 1px solid var(--premium-gray-200);
  }
  
  .apply-button {
    flex: 1;
    padding: var(--premium-space-md);
    background: var(--premium-primary);
    color: white;
    border: none;
    border-radius: var(--premium-radius-md);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: background var(--premium-transition-normal);
  }
  
  .apply-button:hover {
    background: var(--premium-primary-dark);
  }
  
  .reset-button {
    padding: var(--premium-space-md) var(--premium-space-lg);
    background: var(--premium-gray-100);
    color: var(--premium-gray-700);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-md);
    font-size: 0.875rem;
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .reset-button:hover {
    background: var(--premium-gray-200);
  }
  
  /* Search Results */
  .search-results {
    display: none;
  }
  
  .results-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--premium-space-lg);
    background: var(--premium-gray-50);
    border-bottom: 1px solid var(--premium-glass-border);
  }
  
  .results-info {
    display: flex;
    align-items: center;
    gap: var(--premium-space-xs);
    font-size: 0.875rem;
    color: var(--premium-gray-600);
  }
  
  .results-info #results-count {
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .search-time {
    font-size: 0.8rem;
    color: var(--premium-gray-500);
  }
  
  .results-actions {
    display: flex;
    gap: var(--premium-space-sm);
  }
  
  .results-action {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    background: none;
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-md);
    color: var(--premium-gray-600);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .results-action:hover {
    background: var(--premium-primary);
    color: white;
    border-color: var(--premium-primary);
  }
  
  .results-container {
    padding: var(--premium-space-lg);
    display: grid;
    gap: var(--premium-space-lg);
  }
  
  .result-card {
    background: white;
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-lg);
    overflow: hidden;
    transition: all var(--premium-transition-normal);
    opacity: 0;
    transform: translateY(20px);
  }
  
  .result-fade-in {
    animation: resultFadeIn 0.5s ease-out forwards;
  }
  
  @keyframes resultFadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .result-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--premium-shadow-lg);
  }
  
  .result-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--premium-space-md);
    background: var(--premium-gray-50);
    border-bottom: 1px solid var(--premium-gray-200);
  }
  
  .result-type {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
  }
  
  .type-icon {
    font-size: 1rem;
  }
  
  .type-label {
    font-size: 0.8rem;
    font-weight: 500;
    color: var(--premium-gray-700);
    text-transform: capitalize;
  }
  
  .result-score {
    display: flex;
    align-items: center;
  }
  
  .score-indicator {
    width: 40px;
    height: 4px;
    background: var(--premium-gray-200);
    border-radius: 2px;
    overflow: hidden;
  }
  
  .score-fill {
    height: 100%;
    background: var(--premium-gradient-primary);
    border-radius: 2px;
    transition: width 0.8s ease-out;
  }
  
  .result-content {
    padding: var(--premium-space-md);
  }
  
  .result-title {
    margin: 0 0 var(--premium-space-sm);
    font-size: 1.1rem;
    font-weight: 600;
  }
  
  .result-title a {
    color: var(--premium-gray-800);
    text-decoration: none;
    transition: color var(--premium-transition-normal);
  }
  
  .result-title a:hover {
    color: var(--premium-primary);
  }
  
  .result-description {
    margin: 0 0 var(--premium-space-md);
    font-size: 0.875rem;
    color: var(--premium-gray-600);
    line-height: 1.5;
  }
  
  .result-metadata {
    display: flex;
    align-items: center;
    gap: var(--premium-space-md);
    margin-bottom: var(--premium-space-md);
    font-size: 0.8rem;
    color: var(--premium-gray-500);
  }
  
  .difficulty-stars {
    color: var(--premium-warning);
  }
  
  .result-popularity {
    display: flex;
    align-items: center;
    gap: var(--premium-space-xs);
  }
  
  .result-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--premium-space-xs);
    margin-bottom: var(--premium-space-md);
  }
  
  .result-tag {
    padding: 2px 8px;
    background: var(--premium-gray-100);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-sm);
    font-size: 0.7rem;
    color: var(--premium-gray-600);
    cursor: pointer;
    transition: all var(--premium-transition-fast);
  }
  
  .result-tag:hover {
    background: var(--premium-primary);
    color: white;
    border-color: var(--premium-primary);
  }
  
  .result-actions {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    gap: var(--premium-space-sm);
    padding: var(--premium-space-md);
    border-top: 1px solid var(--premium-gray-200);
    background: var(--premium-gray-50);
  }
  
  .result-action {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    background: none;
    border: 1px solid var(--premium-gray-300);
    border-radius: var(--premium-radius-sm);
    color: var(--premium-gray-500);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .result-action:hover {
    background: var(--premium-gray-600);
    color: white;
  }
  
  /* Loading and Empty States */
  .search-loading {
    display: none;
    align-items: center;
    justify-content: center;
    padding: var(--premium-space-xl);
  }
  
  .loading-animation {
    display: flex;
    align-items: center;
    gap: var(--premium-space-md);
    color: var(--premium-gray-600);
    font-size: 0.875rem;
  }
  
  .search-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid var(--premium-gray-300);
    border-top: 2px solid var(--premium-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .no-results {
    text-align: center;
    padding: var(--premium-space-xl);
    color: var(--premium-gray-600);
  }
  
  .no-results-icon {
    font-size: 3rem;
    margin-bottom: var(--premium-space-md);
  }
  
  .no-results h4 {
    margin: 0 0 var(--premium-space-sm);
    color: var(--premium-gray-800);
  }
  
  .no-results p {
    margin: 0 0 var(--premium-space-lg);
    font-size: 0.875rem;
  }
  
  .search-suggestions-text {
    text-align: left;
    max-width: 300px;
    margin: 0 auto;
  }
  
  .search-suggestions-text ul {
    list-style: none;
    padding: 0;
    margin: var(--premium-space-sm) 0 0;
  }
  
  .suggestion-link {
    background: none;
    border: none;
    color: var(--premium-primary);
    cursor: pointer;
    text-decoration: underline;
    font-size: 0.875rem;
  }
  
  .filters-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
    opacity: 0;
    visibility: hidden;
    transition: all var(--premium-transition-normal);
    z-index: 9999;
  }
  
  .overlay-active {
    opacity: 1;
    visibility: visible;
  }
  
  /* Mobile responsive */
  @media (max-width: 768px) {
    .search-container {
      padding: var(--premium-space-md);
    }
    
    .filter-group {
      gap: var(--premium-space-xs);
    }
    
    .filter-tag {
      font-size: 0.75rem;
      padding: var(--premium-space-xs);
    }
    
    .filters-panel {
      width: 95vw;
      max-height: 90vh;
    }
    
    .filter-options {
      grid-template-columns: 1fr;
    }
    
    .results-header {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--premium-space-sm);
    }
    
    .result-metadata {
      flex-wrap: wrap;
      gap: var(--premium-space-sm);
    }
  }
  
  /* Dark mode */
  [data-theme="dark"] .search-system {
    background: var(--premium-gray-800);
    border-color: var(--premium-gray-700);
  }
  
  [data-theme="dark"] .search-input-wrapper {
    background: var(--premium-gray-700);
    border-color: var(--premium-gray-600);
  }
  
  [data-theme="dark"] .search-input {
    color: var(--premium-gray-200);
  }
  
  [data-theme="dark"] .result-card {
    background: var(--premium-gray-700);
    border-color: var(--premium-gray-600);
  }
  
  [data-theme="dark"] .result-title a {
    color: var(--premium-gray-200);
  }
  
  [data-theme="dark"] .filters-panel {
    background: var(--premium-gray-800);
    border-color: var(--premium-gray-700);
  }
</style>