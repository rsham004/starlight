---
// AI-Powered Content Recommendations - Intelligent content discovery system
---

<div id="ai-recommendations" class="recommendations-system">
  <div class="recommendations-header">
    <div class="header-content">
      <div class="ai-indicator">
        <div class="ai-icon">
          <svg width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
            <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM7.5 3.5a.5.5 0 0 1 1 0V6h2.5a.5.5 0 0 1 0 1H8.5v2.5a.5.5 0 0 1-1 0V7H5a.5.5 0 0 1 0-1h2.5V3.5z"/>
          </svg>
        </div>
        <span class="ai-label">AI Powered</span>
      </div>
      <div class="recommendations-title">
        <h3>Recommended for You</h3>
        <p>Personalized content based on your interests and progress</p>
      </div>
    </div>
    <div class="recommendation-controls">
      <button id="refresh-recommendations" class="control-button" title="Refresh recommendations">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
          <path d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
          <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
        </svg>
      </button>
      <button id="recommendation-settings" class="control-button" title="Recommendation settings">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
          <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/>
        </svg>
      </button>
    </div>
  </div>
  
  <div class="recommendations-container">
    <div id="recommendations-loading" class="loading-state">
      <div class="ai-thinking">
        <div class="thinking-animation">
          <div class="thinking-dot"></div>
          <div class="thinking-dot"></div>
          <div class="thinking-dot"></div>
        </div>
        <span>AI is analyzing your preferences...</span>
      </div>
    </div>
    
    <div id="recommendations-content" class="recommendations-content">
      <!-- Dynamic recommendations will be inserted here -->
    </div>
  </div>
  
  <!-- Settings Panel -->
  <div id="settings-panel" class="settings-panel">
    <div class="settings-header">
      <h4>Recommendation Settings</h4>
      <button id="close-settings" class="close-button">
        <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
          <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854z"/>
        </svg>
      </button>
    </div>
    <div class="settings-content">
      <div class="setting-group">
        <label>Recommendation Types</label>
        <div class="checkbox-group">
          <label class="checkbox-label">
            <input type="checkbox" id="rec-challenges" checked>
            <span>Challenges</span>
          </label>
          <label class="checkbox-label">
            <input type="checkbox" id="rec-events" checked>
            <span>Events</span>
          </label>
          <label class="checkbox-label">
            <input type="checkbox" id="rec-discussions" checked>
            <span>Discussions</span>
          </label>
          <label class="checkbox-label">
            <input type="checkbox" id="rec-resources" checked>
            <span>Learning Resources</span>
          </label>
        </div>
      </div>
      
      <div class="setting-group">
        <label>Difficulty Preference</label>
        <div class="slider-group">
          <input type="range" id="difficulty-slider" min="1" max="5" value="3">
          <div class="slider-labels">
            <span>Beginner</span>
            <span>Expert</span>
          </div>
        </div>
      </div>
      
      <div class="setting-group">
        <label>Interest Areas</label>
        <div class="interest-tags">
          <div class="interest-tag" data-interest="ml">Machine Learning</div>
          <div class="interest-tag" data-interest="nlp">Natural Language Processing</div>
          <div class="interest-tag" data-interest="cv">Computer Vision</div>
          <div class="interest-tag" data-interest="robotics">Robotics</div>
          <div class="interest-tag" data-interest="ethics">AI Ethics</div>
          <div class="interest-tag" data-interest="research">Research</div>
        </div>
      </div>
    </div>
  </div>
  
  <div id="settings-overlay" class="settings-overlay"></div>
</div>

<script>
  class AIRecommendationSystem {
    constructor() {
      this.recommendationsContent = document.getElementById('recommendations-content');
      this.recommendationsLoading = document.getElementById('recommendations-loading');
      this.refreshButton = document.getElementById('refresh-recommendations');
      this.settingsButton = document.getElementById('recommendation-settings');
      this.settingsPanel = document.getElementById('settings-panel');
      this.settingsOverlay = document.getElementById('settings-overlay');
      this.closeSettings = document.getElementById('close-settings');
      
      this.userRole = 'public';
      this.userPreferences = this.loadPreferences();
      this.userActivity = this.loadUserActivity();
      this.recommendations = [];
      
      this.init();
    }
    
    async init() {
      await this.loadUserRole();
      this.setupEventListeners();
      this.setupSettingsPanel();
      await this.generateRecommendations();
      this.schedulePeriodicRefresh();
    }
    
    async loadUserRole() {
      try {
        const response = await fetch('/api/auth/user');
        if (response.ok) {
          const userData = await response.json();
          this.userRole = userData.role || 'public';
        }
      } catch {
        this.userRole = 'public';
      }
    }
    
    loadPreferences() {
      const saved = localStorage.getItem('ai-recommendation-preferences');
      return saved ? JSON.parse(saved) : {
        types: ['challenges', 'events', 'discussions', 'resources'],
        difficulty: 3,
        interests: ['ml', 'nlp'],
        maxRecommendations: 6,
        excludeViewed: true
      };
    }
    
    savePreferences() {
      localStorage.setItem('ai-recommendation-preferences', JSON.stringify(this.userPreferences));
    }
    
    loadUserActivity() {
      const saved = localStorage.getItem('starlight-user-activity');
      return saved ? JSON.parse(saved) : {
        viewedContent: [],
        completedChallenges: [],
        searchHistory: [],
        interactionTimes: {},
        preferredTopics: []
      };
    }
    
    saveUserActivity() {
      localStorage.setItem('starlight-user-activity', JSON.stringify(this.userActivity));
    }
    
    setupEventListeners() {
      this.refreshButton.addEventListener('click', this.refreshRecommendations.bind(this));
      this.settingsButton.addEventListener('click', this.openSettings.bind(this));
      this.closeSettings.addEventListener('click', this.closeSettingsPanel.bind(this));
      this.settingsOverlay.addEventListener('click', this.closeSettingsPanel.bind(this));
      
      // Track user interactions
      document.addEventListener('click', (e) => {
        if (e.target.closest('.recommendation-card')) {
          this.trackRecommendationClick(e.target.closest('.recommendation-card'));
        }
      });
    }
    
    setupSettingsPanel() {
      // Setup type checkboxes
      ['challenges', 'events', 'discussions', 'resources'].forEach(type => {
        const checkbox = document.getElementById(`rec-${type}`);
        checkbox.checked = this.userPreferences.types.includes(type);
        checkbox.addEventListener('change', this.updateTypePreferences.bind(this));
      });
      
      // Setup difficulty slider
      const difficultySlider = document.getElementById('difficulty-slider');
      difficultySlider.value = this.userPreferences.difficulty;
      difficultySlider.addEventListener('input', this.updateDifficultyPreference.bind(this));
      
      // Setup interest tags
      this.updateInterestTags();
    }
    
    updateTypePreferences() {
      this.userPreferences.types = [];
      ['challenges', 'events', 'discussions', 'resources'].forEach(type => {
        if (document.getElementById(`rec-${type}`).checked) {
          this.userPreferences.types.push(type);
        }
      });
      this.savePreferences();
      this.generateRecommendations();
    }
    
    updateDifficultyPreference(e) {
      this.userPreferences.difficulty = parseInt(e.target.value);
      this.savePreferences();
      this.generateRecommendations();
    }
    
    updateInterestTags() {
      const interestTags = document.querySelectorAll('.interest-tag');
      interestTags.forEach(tag => {
        const interest = tag.dataset.interest;
        if (this.userPreferences.interests.includes(interest)) {
          tag.classList.add('selected');
        }
        
        tag.addEventListener('click', () => {
          tag.classList.toggle('selected');
          const isSelected = tag.classList.contains('selected');
          
          if (isSelected) {
            if (!this.userPreferences.interests.includes(interest)) {
              this.userPreferences.interests.push(interest);
            }
          } else {
            this.userPreferences.interests = this.userPreferences.interests.filter(i => i !== interest);
          }
          
          this.savePreferences();
          this.generateRecommendations();
        });
      });
    }
    
    openSettings() {
      this.settingsPanel.classList.add('panel-open');
      this.settingsOverlay.classList.add('overlay-active');
    }
    
    closeSettingsPanel() {
      this.settingsPanel.classList.remove('panel-open');
      this.settingsOverlay.classList.remove('overlay-active');
    }
    
    async generateRecommendations() {
      this.showLoading();
      
      // Simulate AI processing time
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const recommendations = await this.computeRecommendations();
      this.recommendations = recommendations;
      this.renderRecommendations(recommendations);
      this.hideLoading();
    }
    
    async refreshRecommendations() {
      this.refreshButton.classList.add('refreshing');
      await this.generateRecommendations();
      this.refreshButton.classList.remove('refreshing');
    }
    
    showLoading() {
      this.recommendationsLoading.style.display = 'flex';
      this.recommendationsContent.style.display = 'none';
    }
    
    hideLoading() {
      this.recommendationsLoading.style.display = 'none';
      this.recommendationsContent.style.display = 'block';
    }
    
    async computeRecommendations() {
      const baseRecommendations = this.getBaseRecommendations();
      const personalizedRecs = this.applyPersonalization(baseRecommendations);
      const scoredRecs = this.scoreRecommendations(personalizedRecs);
      const filteredRecs = this.filterRecommendations(scoredRecs);
      
      return filteredRecs
        .sort((a, b) => b.score - a.score)
        .slice(0, this.userPreferences.maxRecommendations);
    }
    
    getBaseRecommendations() {
      const recommendations = {
        challenges: [
          {
            id: 'ml-fundamentals',
            title: 'Machine Learning Fundamentals',
            description: 'Master the core concepts of ML algorithms and data preprocessing',
            path: '/challenges/ml-fundamentals',
            difficulty: 2,
            tags: ['ml', 'beginner'],
            estimatedTime: '2-3 hours',
            participants: 156,
            type: 'challenges'
          },
          {
            id: 'nlp-chatbot',
            title: 'Build an AI Chatbot',
            description: 'Create an intelligent conversational agent using NLP techniques',
            path: '/challenges/nlp-chatbot',
            difficulty: 4,
            tags: ['nlp', 'chatbot'],
            estimatedTime: '4-6 hours',
            participants: 89,
            type: 'challenges'
          },
          {
            id: 'computer-vision',
            title: 'Image Recognition Challenge',
            description: 'Develop a computer vision system for object detection',
            path: '/challenges/computer-vision',
            difficulty: 3,
            tags: ['cv', 'deeplearning'],
            estimatedTime: '3-4 hours',
            participants: 112,
            type: 'challenges'
          }
        ],
        events: [
          {
            id: 'ai-workshop-series',
            title: 'AI Workshop Series',
            description: 'Weekly hands-on workshops covering latest AI developments',
            path: '/Events/ai-workshop-series',
            difficulty: 2,
            tags: ['workshop', 'learning'],
            date: '2025-07-30',
            attendees: 45,
            type: 'events'
          },
          {
            id: 'ethics-symposium',
            title: 'AI Ethics Symposium',
            description: 'Exploring responsible AI development and deployment',
            path: '/Events/ethics-symposium',
            difficulty: 3,
            tags: ['ethics', 'discussion'],
            date: '2025-08-05',
            attendees: 78,
            type: 'events'
          }
        ],
        discussions: [
          {
            id: 'future-of-ai',
            title: 'The Future of Artificial Intelligence',
            description: 'Community discussion on AI trends and implications',
            path: '/discussions/future-of-ai',
            difficulty: 2,
            tags: ['discussion', 'trends'],
            replies: 23,
            participants: 67,
            type: 'discussions'
          }
        ],
        resources: [
          {
            id: 'ai-research-papers',
            title: 'Latest AI Research Papers',
            description: 'Curated collection of cutting-edge AI research',
            path: '/resources/research-papers',
            difficulty: 4,
            tags: ['research', 'papers'],
            articles: 15,
            type: 'resources'
          },
          {
            id: 'ml-toolkits',
            title: 'Machine Learning Toolkits',
            description: 'Essential tools and libraries for ML development',
            path: '/resources/ml-toolkits',
            difficulty: 2,
            tags: ['tools', 'ml'],
            tools: 12,
            type: 'resources'
          }
        ]
      };
      
      // Filter by user preferences
      const filteredRecs = [];
      this.userPreferences.types.forEach(type => {
        if (recommendations[type]) {
          filteredRecs.push(...recommendations[type]);
        }
      });
      
      return filteredRecs;
    }
    
    applyPersonalization(recommendations) {
      return recommendations.map(rec => {
        // Interest matching
        const interestMatch = rec.tags.some(tag => 
          this.userPreferences.interests.includes(tag)
        );
        
        // Difficulty preference
        const difficultyMatch = Math.abs(rec.difficulty - this.userPreferences.difficulty) <= 1;
        
        // Role-based relevance
        const roleRelevance = this.getRoleRelevance(rec);
        
        return {
          ...rec,
          personalizedScore: {
            interestMatch,
            difficultyMatch,
            roleRelevance
          }
        };
      });
    }
    
    getRoleRelevance(recommendation) {
      const rolePreferences = {
        'management': ['ethics', 'research', 'discussion'],
        'working_group': ['challenges', 'workshop', 'tools'],
        'public': ['beginner', 'learning', 'fundamentals']
      };
      
      const preferredTags = rolePreferences[this.userRole] || rolePreferences.public;
      return recommendation.tags.some(tag => preferredTags.includes(tag));
    }
    
    scoreRecommendations(recommendations) {
      return recommendations.map(rec => {
        let score = 0;
        
        // Base score
        score += 10;
        
        // Interest bonus
        if (rec.personalizedScore.interestMatch) score += 20;
        
        // Difficulty bonus
        if (rec.personalizedScore.difficultyMatch) score += 15;
        
        // Role relevance bonus
        if (rec.personalizedScore.roleRelevance) score += 10;
        
        // Activity-based scoring
        if (this.userActivity.preferredTopics.some(topic => 
          rec.tags.includes(topic))) {
          score += 15;
        }
        
        // Novelty bonus (not viewed recently)
        if (!this.userActivity.viewedContent.includes(rec.id)) {
          score += 5;
        }
        
        // Popularity factor (normalized)
        const popularityBonus = Math.min(
          (rec.participants || rec.attendees || rec.replies || 1) / 10, 
          10
        );
        score += popularityBonus;
        
        return { ...rec, score };
      });
    }
    
    filterRecommendations(recommendations) {
      return recommendations.filter(rec => {
        // Exclude already viewed if preference is set
        if (this.userPreferences.excludeViewed && 
            this.userActivity.viewedContent.includes(rec.id)) {
          return false;
        }
        
        // Include only selected types
        return this.userPreferences.types.includes(rec.type);
      });
    }
    
    renderRecommendations(recommendations) {
      if (recommendations.length === 0) {
        this.recommendationsContent.innerHTML = `
          <div class="no-recommendations">
            <div class="no-rec-icon">🤖</div>
            <h4>No recommendations available</h4>
            <p>Adjust your preferences or check back later for new content</p>
          </div>
        `;
        return;
      }
      
      this.recommendationsContent.innerHTML = `
        <div class="recommendations-grid">
          ${recommendations.map((rec, index) => this.createRecommendationCard(rec, index)).join('')}
        </div>
      `;
    }
    
    createRecommendationCard(rec, index) {
      const typeIcons = {
        challenges: '🏆',
        events: '📅',
        discussions: '💬',
        resources: '📚'
      };
      
      const difficultyLabels = ['', 'Beginner', 'Easy', 'Medium', 'Hard', 'Expert'];
      
      return `
        <div class="recommendation-card" data-rec-id="${rec.id}" style="animation-delay: ${index * 0.1}s">
          <div class="rec-card-header">
            <div class="rec-type">
              <span class="type-icon">${typeIcons[rec.type]}</span>
              <span class="type-label">${rec.type.charAt(0).toUpperCase() + rec.type.slice(1)}</span>
            </div>
            <div class="rec-score" title="AI Recommendation Score: ${Math.round(rec.score)}%">
              <div class="score-bar">
                <div class="score-fill" style="width: ${Math.min(rec.score, 100)}%"></div>
              </div>
            </div>
          </div>
          
          <div class="rec-card-content">
            <h4 class="rec-title">${rec.title}</h4>
            <p class="rec-description">${rec.description}</p>
            
            <div class="rec-metadata">
              <div class="rec-difficulty">
                <span class="difficulty-label">${difficultyLabels[rec.difficulty]}</span>
                <div class="difficulty-dots">
                  ${Array.from({length: 5}, (_, i) => 
                    `<div class="difficulty-dot ${i < rec.difficulty ? 'active' : ''}"></div>`
                  ).join('')}
                </div>
              </div>
              
              ${rec.estimatedTime ? `
                <div class="rec-time">
                  <svg width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="M7.5 3a.5.5 0 0 1 .5.5v5.21l3.248 1.856a.5.5 0 0 1-.496.868l-3.5-2A.5.5 0 0 1 7 9V3.5a.5.5 0 0 1 .5-.5z"/>
                  </svg>
                  ${rec.estimatedTime}
                </div>
              ` : ''}
              
              ${rec.participants ? `
                <div class="rec-participants">
                  <svg width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
                  </svg>
                  ${rec.participants}
                </div>
              ` : ''}
            </div>
            
            <div class="rec-tags">
              ${rec.tags.slice(0, 3).map(tag => `
                <span class="rec-tag ${this.userPreferences.interests.includes(tag) ? 'highlighted' : ''}">${tag}</span>
              `).join('')}
            </div>
          </div>
          
          <div class="rec-card-footer">
            <a href="${rec.path}" class="rec-action-button">
              <span>Explore</span>
              <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z"/>
              </svg>
            </a>
            <div class="rec-actions">
              <button class="rec-action-btn" title="Save for later" data-action="save">
                <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v14a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.315A.5.5 0 0 1 2 15V1z"/>
                </svg>
              </button>
              <button class="rec-action-btn" title="Not interested" data-action="dismiss">
                <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854z"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      `;
    }
    
    trackRecommendationClick(card) {
      const recId = card.dataset.recId;
      
      // Add to viewed content
      if (!this.userActivity.viewedContent.includes(recId)) {
        this.userActivity.viewedContent.push(recId);
      }
      
      // Update interaction times
      this.userActivity.interactionTimes[recId] = Date.now();
      
      // Extract and update preferred topics
      const recommendation = this.recommendations.find(r => r.id === recId);
      if (recommendation) {
        recommendation.tags.forEach(tag => {
          if (!this.userActivity.preferredTopics.includes(tag)) {
            this.userActivity.preferredTopics.push(tag);
          }
        });
      }
      
      this.saveUserActivity();
    }
    
    schedulePeriodicRefresh() {
      // Refresh recommendations every 30 minutes
      setInterval(() => {
        this.generateRecommendations();
      }, 30 * 60 * 1000);
    }
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new AIRecommendationSystem();
  });
</script>

<style>
  .recommendations-system {
    background: white;
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-lg);
    box-shadow: var(--premium-shadow-sm);
    overflow: hidden;
    position: relative;
  }
  
  .recommendations-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--premium-space-lg);
    background: var(--premium-gradient-subtle);
    border-bottom: 1px solid var(--premium-glass-border);
  }
  
  .header-content {
    display: flex;
    align-items: center;
    gap: var(--premium-space-md);
  }
  
  .ai-indicator {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
    padding: var(--premium-space-xs) var(--premium-space-sm);
    background: var(--premium-gradient-primary);
    color: white;
    border-radius: var(--premium-radius-full);
    font-size: 0.8rem;
    font-weight: 500;
  }
  
  .ai-icon {
    animation: aiPulse 2s ease-in-out infinite;
  }
  
  @keyframes aiPulse {
    0%, 100% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.8; transform: scale(1.1); }
  }
  
  .recommendations-title h3 {
    margin: 0 0 2px;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .recommendations-title p {
    margin: 0;
    font-size: 0.875rem;
    color: var(--premium-gray-600);
  }
  
  .recommendation-controls {
    display: flex;
    gap: var(--premium-space-sm);
  }
  
  .control-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    background: var(--premium-glass);
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-md);
    color: var(--premium-gray-600);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .control-button:hover {
    background: var(--premium-primary);
    color: white;
    transform: translateY(-1px);
  }
  
  .control-button.refreshing {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  .recommendations-container {
    position: relative;
    min-height: 300px;
  }
  
  .loading-state {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    gap: var(--premium-space-md);
    background: white;
    z-index: 10;
  }
  
  .ai-thinking {
    display: flex;
    align-items: center;
    gap: var(--premium-space-md);
    color: var(--premium-gray-600);
    font-size: 0.875rem;
  }
  
  .thinking-animation {
    display: flex;
    gap: 4px;
  }
  
  .thinking-dot {
    width: 8px;
    height: 8px;
    background: var(--premium-primary);
    border-radius: 50%;
    animation: thinkingBounce 1.5s ease-in-out infinite;
  }
  
  .thinking-dot:nth-child(2) {
    animation-delay: 0.2s;
  }
  
  .thinking-dot:nth-child(3) {
    animation-delay: 0.4s;
  }
  
  @keyframes thinkingBounce {
    0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
    40% { transform: scale(1.2); opacity: 1; }
  }
  
  .recommendations-content {
    padding: var(--premium-space-lg);
    display: none;
  }
  
  .recommendations-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: var(--premium-space-lg);
  }
  
  .recommendation-card {
    background: white;
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-lg);
    overflow: hidden;
    transition: all var(--premium-transition-normal);
    opacity: 0;
    transform: translateY(20px);
    animation: cardFadeIn 0.5s ease-out forwards;
  }
  
  .recommendation-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--premium-shadow-lg);
  }
  
  @keyframes cardFadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .rec-card-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--premium-space-md);
    background: var(--premium-gray-50);
    border-bottom: 1px solid var(--premium-gray-200);
  }
  
  .rec-type {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
  }
  
  .type-icon {
    font-size: 1rem;
  }
  
  .type-label {
    font-size: 0.8rem;
    font-weight: 500;
    color: var(--premium-gray-700);
    text-transform: capitalize;
  }
  
  .rec-score {
    display: flex;
    align-items: center;
    gap: var(--premium-space-xs);
  }
  
  .score-bar {
    width: 40px;
    height: 4px;
    background: var(--premium-gray-200);
    border-radius: 2px;
    overflow: hidden;
  }
  
  .score-fill {
    height: 100%;
    background: var(--premium-gradient-primary);
    border-radius: 2px;
    transition: width 0.8s ease-out;
  }
  
  .rec-card-content {
    padding: var(--premium-space-md);
  }
  
  .rec-title {
    margin: 0 0 var(--premium-space-sm);
    font-size: 1rem;
    font-weight: 600;
    color: var(--premium-gray-800);
    line-height: 1.4;
  }
  
  .rec-description {
    margin: 0 0 var(--premium-space-md);
    font-size: 0.875rem;
    color: var(--premium-gray-600);
    line-height: 1.5;
  }
  
  .rec-metadata {
    display: flex;
    align-items: center;
    gap: var(--premium-space-md);
    margin-bottom: var(--premium-space-md);
    font-size: 0.8rem;
    color: var(--premium-gray-500);
  }
  
  .rec-difficulty {
    display: flex;
    align-items: center;
    gap: var(--premium-space-xs);
  }
  
  .difficulty-dots {
    display: flex;
    gap: 2px;
  }
  
  .difficulty-dot {
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background: var(--premium-gray-300);
  }
  
  .difficulty-dot.active {
    background: var(--premium-primary);
  }
  
  .rec-time, .rec-participants {
    display: flex;
    align-items: center;
    gap: var(--premium-space-xs);
  }
  
  .rec-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--premium-space-xs);
    margin-bottom: var(--premium-space-md);
  }
  
  .rec-tag {
    padding: 2px 8px;
    background: var(--premium-gray-100);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-sm);
    font-size: 0.7rem;
    color: var(--premium-gray-600);
    transition: all var(--premium-transition-fast);
  }
  
  .rec-tag.highlighted {
    background: var(--premium-primary);
    color: white;
    border-color: var(--premium-primary);
  }
  
  .rec-card-footer {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--premium-space-md);
    border-top: 1px solid var(--premium-gray-200);
    background: var(--premium-gray-50);
  }
  
  .rec-action-button {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
    padding: var(--premium-space-sm) var(--premium-space-md);
    background: var(--premium-primary);
    color: white;
    text-decoration: none;
    border-radius: var(--premium-radius-md);
    font-size: 0.875rem;
    font-weight: 500;
    transition: all var(--premium-transition-normal);
  }
  
  .rec-action-button:hover {
    background: var(--premium-primary-dark);
    transform: translateY(-1px);
  }
  
  .rec-actions {
    display: flex;
    gap: var(--premium-space-xs);
  }
  
  .rec-action-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    background: none;
    border: 1px solid var(--premium-gray-300);
    border-radius: var(--premium-radius-sm);
    color: var(--premium-gray-500);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .rec-action-btn:hover {
    background: var(--premium-gray-600);
    color: white;
  }
  
  .no-recommendations {
    text-align: center;
    padding: var(--premium-space-xl);
    color: var(--premium-gray-600);
  }
  
  .no-rec-icon {
    font-size: 3rem;
    margin-bottom: var(--premium-space-md);
  }
  
  .no-recommendations h4 {
    margin: 0 0 var(--premium-space-sm);
    color: var(--premium-gray-800);
  }
  
  .no-recommendations p {
    margin: 0;
    font-size: 0.875rem;
  }
  
  /* Settings Panel */
  .settings-panel {
    position: fixed;
    top: 50%;
    left: 50%;
    width: 90vw;
    max-width: 500px;
    max-height: 80vh;
    background: white;
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-lg);
    box-shadow: var(--premium-shadow-xl);
    transform: translate(-50%, -50%) scale(0.9);
    opacity: 0;
    visibility: hidden;
    transition: all var(--premium-transition-normal);
    z-index: 10000;
    overflow: hidden;
  }
  
  .panel-open {
    transform: translate(-50%, -50%) scale(1);
    opacity: 1;
    visibility: visible;
  }
  
  .settings-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--premium-space-lg);
    background: var(--premium-gradient-primary);
    color: white;
  }
  
  .settings-header h4 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
  }
  
  .close-button {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: var(--premium-space-xs);
    border-radius: var(--premium-radius-sm);
    transition: background var(--premium-transition-fast);
  }
  
  .close-button:hover {
    background: rgba(255, 255, 255, 0.2);
  }
  
  .settings-content {
    padding: var(--premium-space-lg);
    max-height: calc(80vh - 80px);
    overflow-y: auto;
  }
  
  .setting-group {
    margin-bottom: var(--premium-space-lg);
  }
  
  .setting-group:last-child {
    margin-bottom: 0;
  }
  
  .setting-group > label {
    display: block;
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--premium-gray-800);
    margin-bottom: var(--premium-space-sm);
  }
  
  .checkbox-group {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--premium-space-sm);
  }
  
  .checkbox-label {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
    font-size: 0.875rem;
    color: var(--premium-gray-700);
    cursor: pointer;
  }
  
  .slider-group {
    position: relative;
  }
  
  .slider-group input[type="range"] {
    width: 100%;
    height: 4px;
    background: var(--premium-gray-200);
    border-radius: 2px;
    outline: none;
    -webkit-appearance: none;
  }
  
  .slider-group input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 16px;
    height: 16px;
    background: var(--premium-primary);
    border-radius: 50%;
    cursor: pointer;
  }
  
  .slider-labels {
    display: flex;
    justify-content: space-between;
    margin-top: var(--premium-space-xs);
    font-size: 0.8rem;
    color: var(--premium-gray-500);
  }
  
  .interest-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--premium-space-sm);
  }
  
  .interest-tag {
    padding: var(--premium-space-sm) var(--premium-space-md);
    background: var(--premium-gray-100);
    border: 2px solid transparent;
    border-radius: var(--premium-radius-md);
    font-size: 0.8rem;
    color: var(--premium-gray-700);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .interest-tag:hover {
    background: var(--premium-gray-200);
  }
  
  .interest-tag.selected {
    background: var(--premium-primary);
    color: white;
    border-color: var(--premium-primary-dark);
  }
  
  .settings-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
    opacity: 0;
    visibility: hidden;
    transition: all var(--premium-transition-normal);
    z-index: 9999;
  }
  
  .overlay-active {
    opacity: 1;
    visibility: visible;
  }
  
  /* Mobile responsive */
  @media (max-width: 768px) {
    .recommendations-header {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--premium-space-md);
    }
    
    .recommendations-grid {
      grid-template-columns: 1fr;
      gap: var(--premium-space-md);
    }
    
    .checkbox-group {
      grid-template-columns: 1fr;
    }
    
    .interest-tags {
      gap: var(--premium-space-xs);
    }
    
    .interest-tag {
      font-size: 0.75rem;
      padding: var(--premium-space-xs) var(--premium-space-sm);
    }
  }
  
  /* Dark mode */
  [data-theme="dark"] .recommendations-system {
    background: var(--premium-gray-800);
    border-color: var(--premium-gray-700);
  }
  
  [data-theme="dark"] .recommendations-header {
    background: var(--premium-gray-900);
    border-color: var(--premium-gray-700);
  }
  
  [data-theme="dark"] .recommendations-title h3 {
    color: var(--premium-gray-200);
  }
  
  [data-theme="dark"] .recommendations-title p {
    color: var(--premium-gray-400);
  }
  
  [data-theme="dark"] .recommendation-card {
    background: var(--premium-gray-700);
    border-color: var(--premium-gray-600);
  }
  
  [data-theme="dark"] .rec-title {
    color: var(--premium-gray-200);
  }
  
  [data-theme="dark"] .rec-description {
    color: var(--premium-gray-400);
  }
  
  [data-theme="dark"] .settings-panel {
    background: var(--premium-gray-800);
    border-color: var(--premium-gray-700);
  }
  
  [data-theme="dark"] .settings-content {
    color: var(--premium-gray-300);
  }
</style>