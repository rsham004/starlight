<!-- Client-side auth status that works around middleware issues -->
<div id="auth-status" class="auth-floating">
  <!-- Default to showing sign-in buttons, will be updated by JavaScript -->
  <div id="signed-out" style="display: flex; gap: 0.5rem;">
    <a href="/sign-in" style="background: #2563eb; color: white; padding: 0.5rem 1rem; border-radius: 4px; text-decoration: none; font-size: 0.9rem;">Sign In</a>
    <a href="/sign-up" style="background: #059669; color: white; padding: 0.5rem 1rem; border-radius: 4px; text-decoration: none; font-size: 0.9rem;">Sign Up</a>
  </div>
  
  <div id="signed-in" style="display: none; align-items: center; gap: 1rem; background: white; padding: 0.5rem 1rem; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
    <span id="user-welcome" style="font-size: 0.9rem;">Welcome!</span>
    <span id="user-role" style="font-size: 0.8rem; background: #e5e7eb; padding: 0.25rem 0.5rem; border-radius: 4px;">Public</span>
    <button id="signout-btn" style="background: #dc2626; color: white; padding: 0.25rem 0.75rem; border-radius: 4px; border: none; cursor: pointer; font-size: 0.8rem;">
      Sign Out
    </button>
  </div>
</div>

<script>
  // Check authentication status using Clerk's client-side JavaScript
  async function checkAuthStatus() {
    try {
      // Try to get the user from Clerk's client-side API
      const response = await fetch('/api/auth/user');
      if (response.ok) {
        const userData = await response.json();
        if (userData.userId) {
          // User is signed in
          document.getElementById('signed-out').style.display = 'none';
          document.getElementById('signed-in').style.display = 'flex';
          
          if (userData.email) {
            document.getElementById('user-welcome').textContent = `Welcome, ${userData.email.split('@')[0]}!`;
          }
          
          // Show user role
          if (userData.role) {
            const roleElement = document.getElementById('user-role');
            roleElement.textContent = userData.role === 'management' ? 'Management' : 
                                    userData.role === 'working_group' ? 'Working Group' : 'Public';
            
            // Style based on role
            if (userData.role === 'management') {
              roleElement.style.background = '#dc2626';
              roleElement.style.color = 'white';
            } else if (userData.role === 'working_group') {
              roleElement.style.background = '#2563eb';
              roleElement.style.color = 'white';
            }
          }
        }
      }
    } catch (error) {
      // If fetch fails, user is likely signed out - keep default state
      console.log('Auth check failed, assuming signed out');
    }
  }
  
  // Function to update UI for signed-out state
  function showSignedOutState() {
    document.getElementById('signed-in').style.display = 'none';
    document.getElementById('signed-out').style.display = 'flex';
  }
  
  // Sign out function
  document.getElementById('signout-btn')?.addEventListener('click', async () => {
    try {
      // Immediately update UI
      showSignedOutState();
      
      // Use Clerk's client-side sign out
      if (window.Clerk) {
        await window.Clerk.signOut();
      } else {
        // Fallback: try our API endpoint
        await fetch('/api/auth/signout', { method: 'POST' });
      }
      
      // Small delay then reload to ensure sign-out is processed
      setTimeout(() => {
        window.location.reload();
      }, 500);
      
    } catch (error) {
      console.error('Sign out failed:', error);
      // Fallback: reload anyway
      window.location.reload();
    }
  });
  
  // Check auth status when page loads
  checkAuthStatus();
</script>

<style>
  .auth-floating {
    position: fixed;
    top: 1rem;
    right: 1rem;
    z-index: 1000;
  }
</style>