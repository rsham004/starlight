---
// Smart Breadcrumb Navigation - Provides contextual navigation path
---

<nav id="smart-breadcrumbs" class="breadcrumb-nav" aria-label="Breadcrumb">
  <ol class="breadcrumb-list" id="breadcrumb-list">
    <!-- Breadcrumbs will be populated dynamically -->
  </ol>
</nav>

<script>
  class SmartBreadcrumbs {
    constructor() {
      this.breadcrumbNav = document.getElementById('smart-breadcrumbs');
      this.breadcrumbList = document.getElementById('breadcrumb-list');
      this.currentPath = window.location.pathname;
      this.userRole = 'public';
      
      this.init();
    }
    
    async init() {
      await this.loadUserRole();
      this.generateBreadcrumbs();
      this.showBreadcrumbs();
    }
    
    async loadUserRole() {
      try {
        const response = await fetch('/api/auth/user');
        if (response.ok) {
          const userData = await response.json();
          this.userRole = userData.role || 'public';
        }
      } catch {
        this.userRole = 'public';
      }
    }
    
    generateBreadcrumbs() {
      // Skip breadcrumbs on homepage and auth pages
      if (this.shouldSkipBreadcrumbs()) return;
      
      const pathSegments = this.currentPath.split('/').filter(segment => segment);
      const breadcrumbs = [];
      
      // Always start with Home
      breadcrumbs.push({
        label: 'Home',
        href: '/',
        icon: this.getHomeIcon(),
        isHome: true
      });
      
      // Build breadcrumbs from path segments
      let currentPath = '';
      pathSegments.forEach((segment, index) => {
        currentPath += `/${segment}`;
        
        const breadcrumb = this.createBreadcrumbFromSegment(segment, currentPath, index === pathSegments.length - 1);
        if (breadcrumb) {
          breadcrumbs.push(breadcrumb);
        }
      });
      
      this.renderBreadcrumbs(breadcrumbs);
    }
    
    shouldSkipBreadcrumbs() {
      const skipPaths = ['/', '/sign-in', '/sign-up', '/premium-sign-in', '/premium-sign-up'];
      return skipPaths.includes(this.currentPath);
    }
    
    getHomeIcon() {
      const homeIcons = {
        'management': `<svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                       <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
                      </svg>`,
        'working_group': `<svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                          <path d="M6 2a.5.5 0 0 1 .47.33L10 12H4.5a.5.5 0 0 1-.48-.64L6.04 2.01A.5.5 0 0 1 6 2zm-2.57 8.5h5.114L6.045 3.999 3.43 10.5zM13.5 12H11l-1.5-4h2l1.5 4z"/>
                          </svg>`,
        'public': `<svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                   <path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z"/>
                   </svg>`
      };
      return homeIcons[this.userRole] || homeIcons.public;
    }
    
    createBreadcrumbFromSegment(segment, fullPath, isLast) {
      // Define segment mappings
      const segmentMappings = {
        'challenges': {
          label: 'Challenges',
          icon: `<svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                 <path d="M6 2a.5.5 0 0 1 .47.33L10 12H4.5a.5.5 0 0 1-.48-.64L6.04 2.01A.5.5 0 0 1 6 2zm-2.57 8.5h5.114L6.045 3.999 3.43 10.5zM13.5 12H11l-1.5-4h2l1.5 4z"/>
                 </svg>`
        },
        'Circle_Management': {
          label: 'Management',
          icon: `<svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                 <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
                 </svg>`,
          requiresRole: 'management'
        },
        'Events': {
          label: 'Events',
          icon: `<svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                 <path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zM16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2z"/>
                 </svg>`,
          requiresRole: 'working_group'
        },
        'exploration': {
          label: 'Research',
          icon: `<svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                 <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
                 </svg>`,
          requiresRole: 'working_group'
        },
        'contributing': {
          label: 'Contributing',
          icon: `<svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                 <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                 <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                 </svg>`
        },
        'getting-started': {
          label: 'Getting Started',
          icon: `<svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                 <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                 <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                 </svg>`
        }
      };
      
      const mapping = segmentMappings[segment];
      
      // Check role requirements
      if (mapping?.requiresRole && !this.hasRole(mapping.requiresRole)) {
        return null;
      }
      
      return {
        label: mapping?.label || this.formatSegmentLabel(segment),
        href: isLast ? null : fullPath, // Don't link to current page
        icon: mapping?.icon || this.getDefaultIcon(),
        isCurrent: isLast,
        segment: segment
      };
    }
    
    hasRole(requiredRole) {
      if (requiredRole === 'working_group') {
        return this.userRole === 'working_group' || this.userRole === 'management';
      }
      return this.userRole === requiredRole;
    }
    
    formatSegmentLabel(segment) {
      return segment
        .split(/[-_]/)
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
    }
    
    getDefaultIcon() {
      return `<svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
              <path d="M5.5 2A1.5 1.5 0 0 0 4 3.5v9a1.5 1.5 0 0 0 1.5 1.5h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 13.5 2h-8zM5 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9z"/>
              </svg>`;
    }
    
    renderBreadcrumbs(breadcrumbs) {
      this.breadcrumbList.innerHTML = '';
      
      breadcrumbs.forEach((breadcrumb, index) => {
        const li = document.createElement('li');
        li.className = 'breadcrumb-item';
        li.style.animationDelay = `${index * 0.1}s`;
        
        if (breadcrumb.isCurrent) {
          li.classList.add('current');
          li.innerHTML = `
            <span class="breadcrumb-current">
              <span class="breadcrumb-icon">${breadcrumb.icon}</span>
              <span class="breadcrumb-label">${breadcrumb.label}</span>
            </span>
          `;
          li.setAttribute('aria-current', 'page');
        } else {
          li.innerHTML = `
            <a href="${breadcrumb.href}" class="breadcrumb-link">
              <span class="breadcrumb-icon">${breadcrumb.icon}</span>
              <span class="breadcrumb-label">${breadcrumb.label}</span>
            </a>
            <span class="breadcrumb-separator">
              <svg width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
              </svg>
            </span>
          `;
        }
        
        this.breadcrumbList.appendChild(li);
      });
    }
    
    showBreadcrumbs() {
      if (this.breadcrumbList.children.length > 1) { // Only show if more than just home
        this.breadcrumbNav.classList.add('breadcrumb-visible');
      }
    }
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new SmartBreadcrumbs();
  });
</script>

<style>
  .breadcrumb-nav {
    position: sticky;
    top: 0;
    z-index: 100;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid var(--premium-glass-border);
    padding: var(--premium-space-sm) var(--premium-space-md);
    margin-bottom: var(--premium-space-md);
    opacity: 0;
    transform: translateY(-20px);
    transition: all var(--premium-transition-normal);
  }
  
  .breadcrumb-visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  .breadcrumb-list {
    display: flex;
    align-items: center;
    gap: var(--premium-space-xs);
    list-style: none;
    margin: 0;
    padding: 0;
    flex-wrap: wrap;
  }
  
  .breadcrumb-item {
    display: flex;
    align-items: center;
    gap: var(--premium-space-xs);
    opacity: 0;
    transform: translateX(-10px);
    animation: breadcrumbIn 0.3s ease-out forwards;
  }
  
  @keyframes breadcrumbIn {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  .breadcrumb-link {
    display: flex;
    align-items: center;
    gap: var(--premium-space-xs);
    padding: var(--premium-space-xs) var(--premium-space-sm);
    color: var(--premium-gray-600);
    text-decoration: none;
    border-radius: var(--premium-radius-sm);
    transition: all var(--premium-transition-normal);
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  .breadcrumb-link:hover {
    background: var(--premium-glass);
    color: var(--premium-primary);
    transform: translateY(-1px);
  }
  
  .breadcrumb-current {
    display: flex;
    align-items: center;
    gap: var(--premium-space-xs);
    padding: var(--premium-space-xs) var(--premium-space-sm);
    color: var(--premium-gray-900);
    background: var(--premium-primary);
    color: white;
    border-radius: var(--premium-radius-sm);
    font-size: 0.875rem;
    font-weight: 600;
    box-shadow: var(--premium-shadow-sm);
  }
  
  .breadcrumb-icon {
    display: flex;
    align-items: center;
    flex-shrink: 0;
  }
  
  .breadcrumb-label {
    white-space: nowrap;
  }
  
  .breadcrumb-separator {
    display: flex;
    align-items: center;
    color: var(--premium-gray-400);
    margin: 0 var(--premium-space-xs);
  }
  
  .breadcrumb-item.current .breadcrumb-separator {
    display: none;
  }
  
  /* Home icon special styling */
  .breadcrumb-item:first-child .breadcrumb-icon {
    color: var(--premium-primary);
  }
  
  .breadcrumb-item:first-child .breadcrumb-link:hover .breadcrumb-icon {
    color: var(--premium-primary-dark);
  }
  
  /* Mobile responsive */
  @media (max-width: 768px) {
    .breadcrumb-nav {
      padding: var(--premium-space-xs) var(--premium-space-sm);
    }
    
    .breadcrumb-link,
    .breadcrumb-current {
      font-size: 0.8rem;
      padding: var(--premium-space-xs);
    }
    
    .breadcrumb-label {
      max-width: 100px;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .breadcrumb-separator {
      margin: 0 var(--premium-space-xs);
    }
  }
  
  /* Dark mode */
  [data-theme="dark"] .breadcrumb-nav {
    background: rgba(0, 0, 0, 0.95);
    border-color: var(--premium-gray-700);
  }
  
  [data-theme="dark"] .breadcrumb-link {
    color: var(--premium-gray-300);
  }
  
  [data-theme="dark"] .breadcrumb-link:hover {
    color: var(--premium-primary-light);
  }
  
  [data-theme="dark"] .breadcrumb-current {
    color: white;
    background: var(--premium-primary);
  }
  
  [data-theme="dark"] .breadcrumb-separator {
    color: var(--premium-gray-500);
  }
  
  /* Animation enhancements */
  .breadcrumb-link::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 0;
    height: 2px;
    background: var(--premium-primary);
    transform: translateX(-50%);
    transition: width var(--premium-transition-normal);
  }
  
  .breadcrumb-link {
    position: relative;
  }
  
  .breadcrumb-link:hover::before {
    width: 80%;
  }
</style>