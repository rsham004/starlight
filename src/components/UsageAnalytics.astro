---
// Usage Analytics and Progress Tracking - Comprehensive user behavior analysis and progress monitoring
---

<div id="usage-analytics" class="analytics-system">
  <!-- Analytics Dashboard Header -->
  <div class="analytics-header">
    <div class="header-content">
      <div class="analytics-title">
        <h3>Your Progress & Analytics</h3>
        <p>Track your learning journey and platform engagement</p>
      </div>
      <div class="analytics-controls">
        <select id="time-range" class="time-range-select">
          <option value="7d">Last 7 days</option>
          <option value="30d" selected>Last 30 days</option>
          <option value="90d">Last 90 days</option>
          <option value="1y">Last year</option>
          <option value="all">All time</option>
        </select>
        <button id="export-analytics" class="export-button" title="Export analytics">
          <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
            <path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708l3-3z"/>
          </svg>
          Export
        </button>
      </div>
    </div>
  </div>
  
  <!-- Key Metrics Overview -->
  <div class="metrics-overview">
    <div class="metric-card">
      <div class="metric-icon">‚è±Ô∏è</div>
      <div class="metric-content">
        <div class="metric-value" id="total-time">0h 0m</div>
        <div class="metric-label">Total Learning Time</div>
        <div class="metric-change positive" id="time-change">+12% this week</div>
      </div>
    </div>
    
    <div class="metric-card">
      <div class="metric-icon">üèÜ</div>
      <div class="metric-content">
        <div class="metric-value" id="challenges-completed">0</div>
        <div class="metric-label">Challenges Completed</div>
        <div class="metric-change positive" id="challenges-change">+3 new</div>
      </div>
    </div>
    
    <div class="metric-card">
      <div class="metric-icon">üìä</div>
      <div class="metric-content">
        <div class="metric-value" id="skill-level">Intermediate</div>
        <div class="metric-label">Current Skill Level</div>
        <div class="metric-change neutral" id="skill-change">+15 XP to next level</div>
      </div>
    </div>
    
    <div class="metric-card">
      <div class="metric-icon">üî•</div>
      <div class="metric-content">
        <div class="metric-value" id="streak-count">0</div>
        <div class="metric-label">Learning Streak</div>
        <div class="metric-change positive" id="streak-change">7 days active</div>
      </div>
    </div>
  </div>
  
  <!-- Analytics Charts -->
  <div class="analytics-charts">
    <div class="chart-container">
      <div class="chart-header">
        <h4>Learning Activity</h4>
        <div class="chart-tabs">
          <button class="chart-tab active" data-chart="activity">Activity</button>
          <button class="chart-tab" data-chart="progress">Progress</button>
          <button class="chart-tab" data-chart="topics">Topics</button>
        </div>
      </div>
      <div class="chart-content">
        <canvas id="activity-chart" class="analytics-chart"></canvas>
        <div id="chart-loading" class="chart-loading">
          <div class="loading-spinner"></div>
          <span>Loading analytics...</span>
        </div>
      </div>
    </div>
    
    <div class="insights-panel">
      <h4>Smart Insights</h4>
      <div id="insights-content" class="insights-content">
        <!-- Dynamic insights will be populated here -->
      </div>
    </div>
  </div>
  
  <!-- Detailed Analytics Sections -->
  <div class="analytics-sections">
    <!-- Learning Progress -->
    <div class="analytics-section">
      <h4>Learning Progress</h4>
      <div class="progress-categories">
        <div class="category-progress">
          <div class="category-header">
            <span class="category-name">Machine Learning</span>
            <span class="category-percentage">75%</span>
          </div>
          <div class="progress-bar">
            <div class="progress-fill" style="width: 75%"></div>
          </div>
          <div class="category-details">
            <span>8 of 12 challenges completed</span>
            <span class="next-milestone">Next: Advanced ML Concepts</span>
          </div>
        </div>
        
        <div class="category-progress">
          <div class="category-header">
            <span class="category-name">Natural Language Processing</span>
            <span class="category-percentage">45%</span>
          </div>
          <div class="progress-bar">
            <div class="progress-fill" style="width: 45%"></div>
          </div>
          <div class="category-details">
            <span>3 of 8 challenges completed</span>
            <span class="next-milestone">Next: Transformer Models</span>
          </div>
        </div>
        
        <div class="category-progress">
          <div class="category-header">
            <span class="category-name">Computer Vision</span>
            <span class="category-percentage">30%</span>
          </div>
          <div class="progress-bar">
            <div class="progress-fill" style="width: 30%"></div>
          </div>
          <div class="category-details">
            <span>2 of 10 challenges completed</span>
            <span class="next-milestone">Next: CNN Architectures</span>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Activity Heatmap -->
    <div class="analytics-section">
      <h4>Activity Heatmap</h4>
      <div class="heatmap-container">
        <div class="heatmap-grid" id="activity-heatmap">
          <!-- Heatmap will be generated dynamically -->
        </div>
        <div class="heatmap-legend">
          <span>Less</span>
          <div class="legend-colors">
            <div class="legend-color" data-level="0"></div>
            <div class="legend-color" data-level="1"></div>
            <div class="legend-color" data-level="2"></div>
            <div class="legend-color" data-level="3"></div>
            <div class="legend-color" data-level="4"></div>
          </div>
          <span>More</span>
        </div>
      </div>
    </div>
    
    <!-- Achievements & Badges -->
    <div class="analytics-section">
      <h4>Achievements & Badges</h4>
      <div class="achievements-grid">
        <div class="achievement earned">
          <div class="achievement-badge">üéØ</div>
          <div class="achievement-info">
            <h5>First Challenge</h5>
            <p>Completed your first AI challenge</p>
            <small>Earned 2 days ago</small>
          </div>
        </div>
        
        <div class="achievement earned">
          <div class="achievement-badge">‚ö°</div>
          <div class="achievement-info">
            <h5>Speed Learner</h5>
            <p>Completed 3 challenges in one day</p>
            <small>Earned 1 week ago</small>
          </div>
        </div>
        
        <div class="achievement earned">
          <div class="achievement-badge">ü§ù</div>
          <div class="achievement-info">
            <h5>Team Player</h5>
            <p>Participated in 5 discussions</p>
            <small>Earned 3 days ago</small>
          </div>
        </div>
        
        <div class="achievement locked">
          <div class="achievement-badge">üöÄ</div>
          <div class="achievement-info">
            <h5>Expert Level</h5>
            <p>Complete 20 advanced challenges</p>
            <small>15/20 completed</small>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Study Patterns -->
    <div class="analytics-section">
      <h4>Study Patterns & Recommendations</h4>
      <div class="patterns-content">
        <div class="pattern-insight">
          <div class="insight-icon">üìà</div>
          <div class="insight-content">
            <h5>Peak Learning Time</h5>
            <p>You're most productive between 2:00 PM - 4:00 PM. Consider scheduling challenging content during this window.</p>
          </div>
        </div>
        
        <div class="pattern-insight">
          <div class="insight-icon">üéØ</div>
          <div class="insight-content">
            <h5>Optimal Session Length</h5>
            <p>Your completion rate is highest for 45-60 minute sessions. Try breaking longer challenges into focused segments.</p>
          </div>
        </div>
        
        <div class="pattern-insight">
          <div class="insight-icon">üß†</div>
          <div class="insight-content">
            <h5>Learning Style</h5>
            <p>You prefer hands-on challenges over theoretical content. We recommend more practical projects for better engagement.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Detailed Statistics Modal -->
  <div id="stats-modal" class="stats-modal">
    <div class="modal-content">
      <div class="modal-header">
        <h4>Detailed Statistics</h4>
        <button id="close-stats-modal" class="close-button">
          <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
            <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854z"/>
          </svg>
        </button>
      </div>
      <div class="modal-body">
        <div class="stats-grid">
          <!-- Detailed stats will be populated here -->
        </div>
      </div>
    </div>
  </div>
  
  <div id="stats-overlay" class="stats-overlay"></div>
</div>

<script>
  class UsageAnalyticsSystem {
    constructor() {
      this.timeRangeSelect = document.getElementById('time-range');
      this.activityChart = document.getElementById('activity-chart');
      this.chartLoading = document.getElementById('chart-loading');
      this.insightsContent = document.getElementById('insights-content');
      this.activityHeatmap = document.getElementById('activity-heatmap');
      
      this.analytics = this.loadAnalyticsData();
      this.currentTimeRange = '30d';
      this.currentChart = 'activity';
      this.chart = null;
      
      this.sessionStart = Date.now();
      this.pageViews = 0;
      this.interactions = 0;
      
      this.init();
    }
    
    async init() {
      this.setupEventListeners();
      this.startSessionTracking();
      this.updateMetrics();
      this.generateInsights();
      this.createActivityHeatmap();
      await this.initializeChart();
      
      // Start periodic updates
      setInterval(() => {
        this.updateRealTimeMetrics();
      }, 30000); // Update every 30 seconds
    }
    
    loadAnalyticsData() {
      const saved = localStorage.getItem('usage-analytics-data');
      return saved ? JSON.parse(saved) : this.generateDefaultAnalytics();
    }
    
    saveAnalyticsData() {
      localStorage.setItem('usage-analytics-data', JSON.stringify(this.analytics));
    }
    
    generateDefaultAnalytics() {
      const now = new Date();
      const days = [];
      
      // Generate data for last 90 days
      for (let i = 89; i >= 0; i--) {
        const date = new Date(now);
        date.setDate(date.getDate() - i);
        
        days.push({
          date: date.toISOString().split('T')[0],
          timeSpent: Math.floor(Math.random() * 180 + 30), // 30-210 minutes
          challengesStarted: Math.floor(Math.random() * 3),
          challengesCompleted: Math.floor(Math.random() * 2),
          discussionsParticipated: Math.floor(Math.random() * 2),
          pageViews: Math.floor(Math.random() * 15 + 5),
          searchQueries: Math.floor(Math.random() * 8),
          bookmarks: Math.floor(Math.random() * 3)
        });
      }
      
      return {
        days,
        totalTimeSpent: days.reduce((sum, day) => sum + day.timeSpent, 0),
        totalChallengesCompleted: days.reduce((sum, day) => sum + day.challengesCompleted, 0),
        currentStreak: 7,
        longestStreak: 14,
        skillLevel: 'Intermediate',
        skillPoints: 1250,
        nextLevelPoints: 1500,
        categories: {
          'machine-learning': { completed: 8, total: 12, timeSpent: 1440 },
          'nlp': { completed: 3, total: 8, timeSpent: 720 },
          'computer-vision': { completed: 2, total: 10, timeSpent: 480 },
          'robotics': { completed: 1, total: 6, timeSpent: 240 }
        },
        achievements: [
          { id: 'first-challenge', name: 'First Challenge', earned: true, date: '2025-07-24' },
          { id: 'speed-learner', name: 'Speed Learner', earned: true, date: '2025-07-19' },
          { id: 'team-player', name: 'Team Player', earned: true, date: '2025-07-23' },
          { id: 'expert-level', name: 'Expert Level', earned: false, progress: 15, total: 20 }
        ]
      };
    }
    
    setupEventListeners() {
      // Time range selector
      this.timeRangeSelect.addEventListener('change', this.handleTimeRangeChange.bind(this));
      
      // Chart tabs
      document.querySelectorAll('.chart-tab').forEach(tab => {
        tab.addEventListener('click', this.handleChartTabChange.bind(this));
      });
      
      // Export button
      document.getElementById('export-analytics').addEventListener('click', this.exportAnalytics.bind(this));
      
      // Metric cards click for detailed view
      document.querySelectorAll('.metric-card').forEach(card => {
        card.addEventListener('click', this.showDetailedStats.bind(this));
      });
      
      // Modal controls
      document.getElementById('close-stats-modal').addEventListener('click', this.closeStatsModal.bind(this));
      document.getElementById('stats-overlay').addEventListener('click', this.closeStatsModal.bind(this));
      
      // Track user interactions
      this.setupInteractionTracking();
    }
    
    setupInteractionTracking() {
      // Track page views
      this.trackPageView();
      
      // Track clicks
      document.addEventListener('click', (e) => {
        this.trackInteraction('click', {
          element: e.target.tagName.toLowerCase(),
          className: e.target.className,
          timestamp: Date.now()
        });
      });
      
      // Track form submissions
      document.addEventListener('submit', (e) => {
        this.trackInteraction('form_submit', {
          formId: e.target.id,
          timestamp: Date.now()
        });
      });
      
      // Track scroll depth
      let maxScroll = 0;
      window.addEventListener('scroll', () => {
        const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
        if (scrollPercent > maxScroll) {
          maxScroll = scrollPercent;
          this.trackInteraction('scroll', {
            depth: scrollPercent,
            timestamp: Date.now()
          });
        }
      });
      
      // Track time on page
      window.addEventListener('beforeunload', () => {
        this.trackSessionEnd();
      });
    }
    
    startSessionTracking() {
      // Track session start
      this.trackInteraction('session_start', {
        timestamp: this.sessionStart,
        userAgent: navigator.userAgent,
        viewport: { width: window.innerWidth, height: window.innerHeight }
      });
    }
    
    trackPageView() {
      this.pageViews++;
      this.trackInteraction('page_view', {
        url: window.location.pathname,
        timestamp: Date.now()
      });
    }
    
    trackInteraction(type, data) {
      this.interactions++;
      
      // Store interaction data
      const today = new Date().toISOString().split('T')[0];
      const todayData = this.analytics.days.find(day => day.date === today);
      
      if (todayData) {
        if (!todayData.interactions) todayData.interactions = [];
        todayData.interactions.push({ type, ...data });
      }
      
      this.saveAnalyticsData();
    }
    
    trackSessionEnd() {
      const sessionDuration = Date.now() - this.sessionStart;
      this.trackInteraction('session_end', {
        duration: sessionDuration,
        pageViews: this.pageViews,
        interactions: this.interactions,
        timestamp: Date.now()
      });
      
      // Update today's time spent
      const today = new Date().toISOString().split('T')[0];
      const todayData = this.analytics.days.find(day => day.date === today);
      if (todayData) {
        todayData.timeSpent += Math.floor(sessionDuration / 60000); // Convert to minutes
      }
      
      this.saveAnalyticsData();
    }
    
    handleTimeRangeChange(e) {
      this.currentTimeRange = e.target.value;
      this.updateMetrics();
      this.updateChart();
      this.generateInsights();
    }
    
    handleChartTabChange(e) {
      const chartType = e.target.dataset.chart;
      
      // Update active tab
      document.querySelectorAll('.chart-tab').forEach(tab => tab.classList.remove('active'));
      e.target.classList.add('active');
      
      this.currentChart = chartType;
      this.updateChart();
    }
    
    updateMetrics() {
      const filteredData = this.getFilteredData();
      
      // Total learning time
      const totalMinutes = filteredData.reduce((sum, day) => sum + day.timeSpent, 0);
      const hours = Math.floor(totalMinutes / 60);
      const minutes = totalMinutes % 60;
      document.getElementById('total-time').textContent = `${hours}h ${minutes}m`;
      
      // Challenges completed
      const challengesCompleted = filteredData.reduce((sum, day) => sum + day.challengesCompleted, 0);
      document.getElementById('challenges-completed').textContent = challengesCompleted;
      
      // Skill level and streak
      document.getElementById('skill-level').textContent = this.analytics.skillLevel;
      document.getElementById('streak-count').textContent = this.analytics.currentStreak;
      
      // Update change indicators
      this.updateChangeIndicators(filteredData);
    }
    
    updateChangeIndicators(data) {
      if (data.length < 14) return; // Need at least 2 weeks of data
      
      const thisWeek = data.slice(-7);
      const lastWeek = data.slice(-14, -7);
      
      const thisWeekTime = thisWeek.reduce((sum, day) => sum + day.timeSpent, 0);
      const lastWeekTime = lastWeek.reduce((sum, day) => sum + day.timeSpent, 0);
      
      const timeChange = lastWeekTime > 0 ? ((thisWeekTime - lastWeekTime) / lastWeekTime * 100) : 0;
      const timeChangeElement = document.getElementById('time-change');
      
      if (timeChange > 0) {
        timeChangeElement.textContent = `+${Math.round(timeChange)}% this week`;
        timeChangeElement.className = 'metric-change positive';
      } else if (timeChange < 0) {
        timeChangeElement.textContent = `${Math.round(timeChange)}% this week`;
        timeChangeElement.className = 'metric-change negative';
      } else {
        timeChangeElement.textContent = 'No change this week';
        timeChangeElement.className = 'metric-change neutral';
      }
    }
    
    getFilteredData() {
      const now = new Date();
      let startDate = new Date();
      
      switch (this.currentTimeRange) {
        case '7d':
          startDate.setDate(now.getDate() - 7);
          break;
        case '30d':
          startDate.setDate(now.getDate() - 30);
          break;
        case '90d':
          startDate.setDate(now.getDate() - 90);
          break;
        case '1y':
          startDate.setFullYear(now.getFullYear() - 1);
          break;
        case 'all':
          return this.analytics.days;
      }
      
      const startDateString = startDate.toISOString().split('T')[0];
      return this.analytics.days.filter(day => day.date >= startDateString);
    }
    
    async initializeChart() {
      // Import Chart.js dynamically (in a real implementation)
      // For this demo, we'll create a simple SVG chart
      this.hideChartLoading();
      this.createActivityChart();
    }
    
    createActivityChart() {
      const data = this.getFilteredData();
      const canvas = this.activityChart;
      const ctx = canvas.getContext('2d');
      
      // Set canvas size
      canvas.width = canvas.offsetWidth;
      canvas.height = 300;
      
      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Chart dimensions
      const padding = 40;
      const chartWidth = canvas.width - 2 * padding;
      const chartHeight = canvas.height - 2 * padding;
      
      // Data processing
      const maxValue = Math.max(...data.map(d => d.timeSpent));
      const step = chartWidth / (data.length - 1);
      
      // Draw axes
      ctx.strokeStyle = '#e5e5e5';
      ctx.lineWidth = 1;
      
      // Y-axis
      ctx.beginPath();
      ctx.moveTo(padding, padding);
      ctx.lineTo(padding, padding + chartHeight);
      ctx.stroke();
      
      // X-axis
      ctx.beginPath();
      ctx.moveTo(padding, padding + chartHeight);
      ctx.lineTo(padding + chartWidth, padding + chartHeight);
      ctx.stroke();
      
      // Draw data line
      ctx.strokeStyle = '#6366f1';
      ctx.lineWidth = 2;
      ctx.beginPath();
      
      data.forEach((point, index) => {
        const x = padding + index * step;
        const y = padding + chartHeight - (point.timeSpent / maxValue) * chartHeight;
        
        if (index === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      });
      
      ctx.stroke();
      
      // Draw data points
      ctx.fillStyle = '#6366f1';
      data.forEach((point, index) => {
        const x = padding + index * step;
        const y = padding + chartHeight - (point.timeSpent / maxValue) * chartHeight;
        
        ctx.beginPath();
        ctx.arc(x, y, 3, 0, 2 * Math.PI);
        ctx.fill();
      });
      
      // Add labels
      ctx.fillStyle = '#6b7280';
      ctx.font = '12px system-ui';
      ctx.textAlign = 'center';
      
      // Y-axis labels
      for (let i = 0; i <= 5; i++) {
        const value = (maxValue / 5) * i;
        const y = padding + chartHeight - (i / 5) * chartHeight;
        ctx.fillText(Math.round(value) + 'm', padding - 20, y + 3);
      }
    }
    
    updateChart() {
      this.showChartLoading();
      setTimeout(() => {
        this.createActivityChart();
        this.hideChartLoading();
      }, 500);
    }
    
    showChartLoading() {
      this.chartLoading.style.display = 'flex';
      this.activityChart.style.display = 'none';
    }
    
    hideChartLoading() {
      this.chartLoading.style.display = 'none';
      this.activityChart.style.display = 'block';
    }
    
    generateInsights() {
      const data = this.getFilteredData();
      const insights = this.analyzeData(data);
      
      this.insightsContent.innerHTML = insights.map(insight => `
        <div class="insight-item">
          <div class="insight-icon">${insight.icon}</div>
          <div class="insight-text">
            <h5>${insight.title}</h5>
            <p>${insight.description}</p>
          </div>
          <div class="insight-action">
            <button class="insight-button" data-action="${insight.action}">
              ${insight.actionText}
            </button>
          </div>
        </div>
      `).join('');
      
      // Add event listeners to insight buttons
      this.insightsContent.querySelectorAll('.insight-button').forEach(button => {
        button.addEventListener('click', this.handleInsightAction.bind(this));
      });
    }
    
    analyzeData(data) {
      const insights = [];
      
      // Learning consistency
      const activeDays = data.filter(day => day.timeSpent > 0).length;
      if (activeDays / data.length > 0.7) {
        insights.push({
          icon: 'üéØ',
          title: 'Consistent Learner',
          description: `You've been active ${activeDays} out of ${data.length} days. Great consistency!`,
          action: 'view_schedule',
          actionText: 'View Schedule'
        });
      }
      
      // Peak performance time
      const hourlyData = this.analyzeHourlyPattern(data);
      if (hourlyData.peakHour) {
        insights.push({
          icon: '‚è∞',
          title: 'Peak Performance',
          description: `You're most productive around ${hourlyData.peakHour}:00. Consider scheduling important tasks then.`,
          action: 'optimize_schedule',
          actionText: 'Optimize'
        });
      }
      
      // Skill progression
      const skillProgress = this.analytics.skillPoints / this.analytics.nextLevelPoints;
      if (skillProgress > 0.8) {
        insights.push({
          icon: 'üöÄ',
          title: 'Level Up Soon',
          description: `You're ${Math.round((1 - skillProgress) * 100)}% away from reaching the next skill level!`,
          action: 'view_challenges',
          actionText: 'Find Challenges'
        });
      }
      
      return insights.slice(0, 3); // Show top 3 insights
    }
    
    analyzeHourlyPattern(data) {
      // Simplified hourly analysis
      const hours = Array(24).fill(0).map((_, i) => ({ hour: i, activity: Math.random() }));
      const peakHour = hours.reduce((max, current) => 
        current.activity > max.activity ? current : max
      ).hour;
      
      return { peakHour };
    }
    
    createActivityHeatmap() {
      const container = this.activityHeatmap;
      const data = this.analytics.days.slice(-365); // Last year
      
      // Create heatmap grid
      const weeks = [];
      let currentWeek = [];
      
      data.forEach((day, index) => {
        const date = new Date(day.date);
        const dayOfWeek = date.getDay();
        
        if (dayOfWeek === 0 && currentWeek.length > 0) {
          weeks.push(currentWeek);
          currentWeek = [];
        }
        
        currentWeek.push(day);
        
        if (index === data.length - 1) {
          weeks.push(currentWeek);
        }
      });
      
      container.innerHTML = weeks.map(week => `
        <div class="heatmap-week">
          ${week.map(day => {
            const level = this.getActivityLevel(day.timeSpent);
            return `<div class="heatmap-day" data-level="${level}" title="${day.date}: ${day.timeSpent} minutes"></div>`;
          }).join('')}
        </div>
      `).join('');
    }
    
    getActivityLevel(timeSpent) {
      if (timeSpent === 0) return 0;
      if (timeSpent < 30) return 1;
      if (timeSpent < 60) return 2;
      if (timeSpent < 120) return 3;
      return 4;
    }
    
    handleInsightAction(e) {
      const action = e.target.dataset.action;
      
      switch (action) {
        case 'view_schedule':
          // Navigate to schedule or show schedule modal
          console.log('Navigate to schedule');
          break;
        case 'optimize_schedule':
          // Show schedule optimization suggestions
          console.log('Show optimization suggestions');
          break;
        case 'view_challenges':
          // Navigate to challenges page
          window.location.href = '/challenges';
          break;
      }
    }
    
    showDetailedStats() {
      document.getElementById('stats-modal').classList.add('modal-open');
      document.getElementById('stats-overlay').classList.add('overlay-active');
      
      // Populate modal with detailed statistics
      this.populateDetailedStats();
    }
    
    closeStatsModal() {
      document.getElementById('stats-modal').classList.remove('modal-open');
      document.getElementById('stats-overlay').classList.remove('overlay-active');
    }
    
    populateDetailedStats() {
      const modalBody = document.querySelector('.modal-body .stats-grid');
      const data = this.getFilteredData();
      
      const stats = {
        'Total Sessions': data.filter(d => d.timeSpent > 0).length,
        'Average Session': Math.round(data.reduce((sum, d) => sum + d.timeSpent, 0) / data.length) + ' min',
        'Longest Session': Math.max(...data.map(d => d.timeSpent)) + ' min',
        'Total Page Views': data.reduce((sum, d) => sum + d.pageViews, 0),
        'Search Queries': data.reduce((sum, d) => sum + d.searchQueries, 0),
        'Bookmarks Created': data.reduce((sum, d) => sum + d.bookmarks, 0)
      };
      
      modalBody.innerHTML = Object.entries(stats).map(([key, value]) => `
        <div class="stat-detail">
          <div class="stat-detail-label">${key}</div>
          <div class="stat-detail-value">${value}</div>
        </div>
      `).join('');
    }
    
    updateRealTimeMetrics() {
      // Update current session metrics
      const sessionDuration = Date.now() - this.sessionStart;
      const hours = Math.floor(sessionDuration / 3600000);
      const minutes = Math.floor((sessionDuration % 3600000) / 60000);
      
      // Update any real-time displays
      console.log(`Current session: ${hours}h ${minutes}m, ${this.interactions} interactions`);
    }
    
    exportAnalytics() {
      const data = this.getFilteredData();
      const exportData = {
        timeRange: this.currentTimeRange,
        generatedAt: new Date().toISOString(),
        summary: {
          totalDays: data.length,
          activeDays: data.filter(d => d.timeSpent > 0).length,
          totalTime: data.reduce((sum, d) => sum + d.timeSpent, 0),
          totalChallenges: data.reduce((sum, d) => sum + d.challengesCompleted, 0)
        },
        dailyData: data
      };
      
      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `analytics-${this.currentTimeRange}-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new UsageAnalyticsSystem();
  });
</script>

<style>
  .analytics-system {
    background: white;
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-lg);
    box-shadow: var(--premium-shadow-sm);
    overflow: hidden;
  }
  
  .analytics-header {
    padding: var(--premium-space-lg);
    background: var(--premium-gradient-subtle);
    border-bottom: 1px solid var(--premium-glass-border);
  }
  
  .header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  
  .analytics-title h3 {
    margin: 0 0 4px;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .analytics-title p {
    margin: 0;
    font-size: 0.875rem;
    color: var(--premium-gray-600);
  }
  
  .analytics-controls {
    display: flex;
    align-items: center;
    gap: var(--premium-space-md);
  }
  
  .time-range-select {
    padding: var(--premium-space-sm) var(--premium-space-md);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-md);
    background: white;
    font-size: 0.875rem;
    outline: none;
  }
  
  .export-button {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
    padding: var(--premium-space-sm) var(--premium-space-md);
    background: var(--premium-primary);
    color: white;
    border: none;
    border-radius: var(--premium-radius-md);
    font-size: 0.875rem;
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .export-button:hover {
    background: var(--premium-primary-dark);
    transform: translateY(-1px);
  }
  
  .metrics-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--premium-space-lg);
    padding: var(--premium-space-lg);
    border-bottom: 1px solid var(--premium-glass-border);
  }
  
  .metric-card {
    display: flex;
    align-items: center;
    gap: var(--premium-space-md);
    padding: var(--premium-space-lg);
    background: var(--premium-glass);
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-lg);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .metric-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--premium-shadow-md);
  }
  
  .metric-icon {
    font-size: 2rem;
    flex-shrink: 0;
  }
  
  .metric-content {
    flex: 1;
  }
  
  .metric-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--premium-gray-800);
    margin-bottom: 2px;
  }
  
  .metric-label {
    font-size: 0.875rem;
    color: var(--premium-gray-600);
    margin-bottom: 4px;
  }
  
  .metric-change {
    font-size: 0.8rem;
    font-weight: 500;
  }
  
  .metric-change.positive {
    color: var(--premium-success);
  }
  
  .metric-change.negative {
    color: var(--premium-error);
  }
  
  .metric-change.neutral {
    color: var(--premium-gray-500);
  }
  
  .analytics-charts {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: var(--premium-space-lg);
    padding: var(--premium-space-lg);
    border-bottom: 1px solid var(--premium-glass-border);
  }
  
  .chart-container {
    background: var(--premium-gray-50);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-lg);
    overflow: hidden;
  }
  
  .chart-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--premium-space-md) var(--premium-space-lg);
    background: white;
    border-bottom: 1px solid var(--premium-gray-200);
  }
  
  .chart-header h4 {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .chart-tabs {
    display: flex;
    gap: var(--premium-space-xs);
  }
  
  .chart-tab {
    padding: var(--premium-space-xs) var(--premium-space-sm);
    background: none;
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-sm);
    font-size: 0.8rem;
    color: var(--premium-gray-600);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .chart-tab:hover {
    background: var(--premium-gray-100);
  }
  
  .chart-tab.active {
    background: var(--premium-primary);
    color: white;
    border-color: var(--premium-primary);
  }
  
  .chart-content {
    position: relative;
    padding: var(--premium-space-lg);
    height: 300px;
  }
  
  .analytics-chart {
    width: 100%;
    height: 100%;
  }
  
  .chart-loading {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: none;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.9);
    gap: var(--premium-space-md);
    color: var(--premium-gray-600);
    font-size: 0.875rem;
  }
  
  .loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid var(--premium-gray-300);
    border-top: 2px solid var(--premium-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  .insights-panel {
    background: var(--premium-gray-50);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-lg);
    overflow: hidden;
  }
  
  .insights-panel h4 {
    margin: 0;
    padding: var(--premium-space-md) var(--premium-space-lg);
    background: white;
    border-bottom: 1px solid var(--premium-gray-200);
    font-size: 1rem;
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .insights-content {
    padding: var(--premium-space-lg);
    display: flex;
    flex-direction: column;
    gap: var(--premium-space-md);
  }
  
  .insight-item {
    display: flex;
    align-items: flex-start;
    gap: var(--premium-space-sm);
    padding: var(--premium-space-md);
    background: white;
    border-radius: var(--premium-radius-md);
    box-shadow: var(--premium-shadow-sm);
  }
  
  .insight-icon {
    font-size: 1.2rem;
    flex-shrink: 0;
  }
  
  .insight-text {
    flex: 1;
  }
  
  .insight-text h5 {
    margin: 0 0 4px;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .insight-text p {
    margin: 0;
    font-size: 0.8rem;
    color: var(--premium-gray-600);
    line-height: 1.4;
  }
  
  .insight-action {
    flex-shrink: 0;
  }
  
  .insight-button {
    padding: var(--premium-space-xs) var(--premium-space-sm);
    background: var(--premium-primary);
    color: white;
    border: none;
    border-radius: var(--premium-radius-sm);
    font-size: 0.8rem;
    cursor: pointer;
    transition: background var(--premium-transition-normal);
  }
  
  .insight-button:hover {
    background: var(--premium-primary-dark);
  }
  
  .analytics-sections {
    display: flex;
    flex-direction: column;
    gap: var(--premium-space-xl);
    padding: var(--premium-space-lg);
  }
  
  .analytics-section {
    background: var(--premium-gray-50);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-lg);
    overflow: hidden;
  }
  
  .analytics-section h4 {
    margin: 0;
    padding: var(--premium-space-md) var(--premium-space-lg);
    background: white;
    border-bottom: 1px solid var(--premium-gray-200);
    font-size: 1rem;
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .progress-categories {
    padding: var(--premium-space-lg);
    display: flex;
    flex-direction: column;
    gap: var(--premium-space-lg);
  }
  
  .category-progress {
    background: white;
    padding: var(--premium-space-md);
    border-radius: var(--premium-radius-md);
    box-shadow: var(--premium-shadow-sm);
  }
  
  .category-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--premium-space-sm);
  }
  
  .category-name {
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .category-percentage {
    font-weight: 700;
    color: var(--premium-primary);
  }
  
  .progress-bar {
    height: 8px;
    background: var(--premium-gray-200);
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: var(--premium-space-sm);
  }
  
  .progress-fill {
    height: 100%;
    background: var(--premium-gradient-primary);
    border-radius: 4px;
    transition: width 1s ease-out;
  }
  
  .category-details {
    display: flex;
    justify-content: space-between;
    font-size: 0.8rem;
    color: var(--premium-gray-600);
  }
  
  .next-milestone {
    color: var(--premium-primary);
    font-weight: 500;
  }
  
  .heatmap-container {
    padding: var(--premium-space-lg);
  }
  
  .heatmap-grid {
    display: flex;
    gap: 2px;
    margin-bottom: var(--premium-space-md);
  }
  
  .heatmap-week {
    display: flex;
    flex-direction: column;
    gap: 2px;
  }
  
  .heatmap-day {
    width: 12px;
    height: 12px;
    border-radius: 2px;
    background: var(--premium-gray-200);
    cursor: pointer;
    transition: all var(--premium-transition-fast);
  }
  
  .heatmap-day:hover {
    transform: scale(1.2);
  }
  
  .heatmap-day[data-level="1"] { background: #c6f6d5; }
  .heatmap-day[data-level="2"] { background: #9ae6b4; }
  .heatmap-day[data-level="3"] { background: #68d391; }
  .heatmap-day[data-level="4"] { background: #38a169; }
  
  .heatmap-legend {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
    font-size: 0.8rem;
    color: var(--premium-gray-600);
  }
  
  .legend-colors {
    display: flex;
    gap: 2px;
  }
  
  .legend-color {
    width: 12px;
    height: 12px;
    border-radius: 2px;
    background: var(--premium-gray-200);
  }
  
  .legend-color[data-level="1"] { background: #c6f6d5; }
  .legend-color[data-level="2"] { background: #9ae6b4; }
  .legend-color[data-level="3"] { background: #68d391; }
  .legend-color[data-level="4"] { background: #38a169; }
  
  .achievements-grid {
    padding: var(--premium-space-lg);
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--premium-space-md);
  }
  
  .achievement {
    display: flex;
    align-items: center;
    gap: var(--premium-space-md);
    padding: var(--premium-space-md);
    background: white;
    border-radius: var(--premium-radius-md);
    box-shadow: var(--premium-shadow-sm);
    transition: all var(--premium-transition-normal);
  }
  
  .achievement:hover {
    transform: translateY(-2px);
    box-shadow: var(--premium-shadow-md);
  }
  
  .achievement.locked {
    opacity: 0.6;
  }
  
  .achievement-badge {
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--premium-gradient-primary);
    border-radius: 50%;
    font-size: 1.5rem;
    flex-shrink: 0;
  }
  
  .achievement.locked .achievement-badge {
    background: var(--premium-gray-300);
    filter: grayscale(1);
  }
  
  .achievement-info h5 {
    margin: 0 0 4px;
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .achievement-info p {
    margin: 0 0 4px;
    font-size: 0.8rem;
    color: var(--premium-gray-600);
    line-height: 1.3;
  }
  
  .achievement-info small {
    font-size: 0.75rem;
    color: var(--premium-gray-500);
  }
  
  .patterns-content {
    padding: var(--premium-space-lg);
    display: flex;
    flex-direction: column;
    gap: var(--premium-space-md);
  }
  
  .pattern-insight {
    display: flex;
    gap: var(--premium-space-md);
    padding: var(--premium-space-md);
    background: white;
    border-radius: var(--premium-radius-md);
    box-shadow: var(--premium-shadow-sm);
  }
  
  .insight-icon {
    font-size: 1.5rem;
    flex-shrink: 0;
  }
  
  .insight-content h5 {
    margin: 0 0 var(--premium-space-xs);
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .insight-content p {
    margin: 0;
    font-size: 0.85rem;
    color: var(--premium-gray-600);
    line-height: 1.4;
  }
  
  /* Stats Modal */
  .stats-modal {
    position: fixed;
    top: 50%;
    left: 50%;
    width: 90vw;
    max-width: 600px;
    max-height: 80vh;
    background: white;
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-lg);
    box-shadow: var(--premium-shadow-xl);
    transform: translate(-50%, -50%) scale(0.9);
    opacity: 0;
    visibility: hidden;
    transition: all var(--premium-transition-normal);
    z-index: 10000;
    overflow: hidden;
  }
  
  .modal-open {
    transform: translate(-50%, -50%) scale(1);
    opacity: 1;
    visibility: visible;
  }
  
  .modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--premium-space-lg);
    background: var(--premium-gradient-primary);
    color: white;
  }
  
  .modal-header h4 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
  }
  
  .close-button {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: var(--premium-space-xs);
    border-radius: var(--premium-radius-sm);
    transition: background var(--premium-transition-fast);
  }
  
  .close-button:hover {
    background: rgba(255, 255, 255, 0.2);
  }
  
  .modal-body {
    padding: var(--premium-space-lg);
    max-height: calc(80vh - 80px);
    overflow-y: auto;
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--premium-space-md);
  }
  
  .stat-detail {
    padding: var(--premium-space-md);
    background: var(--premium-gray-50);
    border-radius: var(--premium-radius-md);
    text-align: center;
  }
  
  .stat-detail-label {
    font-size: 0.8rem;
    color: var(--premium-gray-600);
    margin-bottom: 4px;
  }
  
  .stat-detail-value {
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--premium-primary);
  }
  
  .stats-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
    opacity: 0;
    visibility: hidden;
    transition: all var(--premium-transition-normal);
    z-index: 9999;
  }
  
  .overlay-active {
    opacity: 1;
    visibility: visible;
  }
  
  /* Mobile responsive */
  @media (max-width: 768px) {
    .header-content {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--premium-space-md);
    }
    
    .metrics-overview {
      grid-template-columns: 1fr;
      gap: var(--premium-space-md);
    }
    
    .analytics-charts {
      grid-template-columns: 1fr;
    }
    
    .achievements-grid {
      grid-template-columns: 1fr;
    }
    
    .stats-grid {
      grid-template-columns: 1fr;
    }
    
    .heatmap-grid {
      overflow-x: auto;
      padding-bottom: var(--premium-space-sm);
    }
  }
  
  /* Dark mode */
  [data-theme="dark"] .analytics-system {
    background: var(--premium-gray-800);
    border-color: var(--premium-gray-700);
  }
  
  [data-theme="dark"] .analytics-header {
    background: var(--premium-gray-900);
    border-color: var(--premium-gray-700);
  }
  
  [data-theme="dark"] .analytics-title h3 {
    color: var(--premium-gray-200);
  }
  
  [data-theme="dark"] .analytics-title p {
    color: var(--premium-gray-400);
  }
  
  [data-theme="dark"] .metric-card {
    background: var(--premium-gray-700);
    border-color: var(--premium-gray-600);
  }
  
  [data-theme="dark"] .metric-value {
    color: var(--premium-gray-200);
  }
  
  [data-theme="dark"] .analytics-section {
    background: var(--premium-gray-700);
    border-color: var(--premium-gray-600);
  }
  
  [data-theme="dark"] .analytics-section h4 {
    background: var(--premium-gray-800);
    color: var(--premium-gray-200);
    border-color: var(--premium-gray-600);
  }
  
  [data-theme="dark"] .stats-modal {
    background: var(--premium-gray-800);
    border-color: var(--premium-gray-700);
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>