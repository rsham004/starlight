---
// Adaptive User Interface - Dynamic interface adjustments based on user behavior and preferences
---

<div id="adaptive-interface" class="adaptive-system">
  <!-- Interface Adaptation Controls -->
  <div id="adaptation-controls" class="adaptation-controls">
    <button id="adaptation-toggle" class="adaptation-button" title="Toggle adaptive interface">
      <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
        <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"/>
      </svg>
      <span id="adaptation-status">Auto</span>
    </button>
    
    <div id="adaptation-panel" class="adaptation-panel">
      <div class="panel-header">
        <h4>Interface Adaptations</h4>
        <div class="adaptation-indicator">
          <div class="indicator-dot" id="adaptation-dot"></div>
          <span id="adaptation-mode">Learning</span>
        </div>
      </div>
      
      <div class="adaptation-options">
        <div class="option-group">
          <label>Interface Density</label>
          <div class="density-options">
            <button class="density-btn" data-density="compact">Compact</button>
            <button class="density-btn active" data-density="comfortable">Comfortable</button>
            <button class="density-btn" data-density="spacious">Spacious</button>
          </div>
        </div>
        
        <div class="option-group">
          <label>Animation Level</label>
          <div class="animation-slider">
            <input type="range" id="animation-level" min="0" max="3" value="2">
            <div class="slider-labels">
              <span>None</span>
              <span>Subtle</span>
              <span>Normal</span>
              <span>Rich</span>
            </div>
          </div>
        </div>
        
        <div class="option-group">
          <label>Navigation Style</label>
          <div class="nav-style-options">
            <label class="radio-option">
              <input type="radio" name="nav-style" value="sidebar" checked>
              <span>Sidebar</span>
            </label>
            <label class="radio-option">
              <input type="radio" name="nav-style" value="tabs">
              <span>Tabs</span>
            </label>
            <label class="radio-option">
              <input type="radio" name="nav-style" value="breadcrumbs">
              <span>Breadcrumbs</span>
            </label>
          </div>
        </div>
        
        <div class="option-group">
          <label class="checkbox-option">
            <input type="checkbox" id="reduce-motion">
            <span>Reduce motion for accessibility</span>
          </label>
          <label class="checkbox-option">
            <input type="checkbox" id="high-contrast">
            <span>High contrast mode</span>
          </label>
          <label class="checkbox-option">
            <input type="checkbox" id="focus-indicators">
            <span>Enhanced focus indicators</span>
          </label>
        </div>
      </div>
      
      <div class="adaptation-stats">
        <h5>Learning Insights</h5>
        <div class="stats-grid">
          <div class="stat-item">
            <span class="stat-label">Session Time</span>
            <span class="stat-value" id="session-time">0m</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Interactions</span>
            <span class="stat-value" id="interaction-count">0</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Adaptations</span>
            <span class="stat-value" id="adaptation-count">0</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class AdaptiveInterface {
    constructor() {
      this.adaptationToggle = document.getElementById('adaptation-toggle');
      this.adaptationPanel = document.getElementById('adaptation-panel');
      this.adaptationStatus = document.getElementById('adaptation-status');
      this.adaptationDot = document.getElementById('adaptation-dot');
      this.adaptationMode = document.getElementById('adaptation-mode');
      
      this.sessionStart = Date.now();
      this.interactionCount = 0;
      this.adaptationCount = 0;
      this.learningData = this.loadLearningData();
      this.preferences = this.loadPreferences();
      this.isAdaptationEnabled = true;
      this.adaptationTimer = null;
      
      this.init();
    }
    
    async init() {
      this.setupEventListeners();
      this.startBehaviorTracking();
      this.applyStoredPreferences();
      this.startAdaptationEngine();
      this.updateStats();
      
      // Start session tracking
      setInterval(() => this.updateStats(), 30000); // Update every 30 seconds
    }
    
    loadLearningData() {
      const saved = localStorage.getItem('adaptive-learning-data');
      return saved ? JSON.parse(saved) : {
        clickPatterns: {},
        scrollBehavior: {},
        navigationPreferences: {},
        timeSpentOnSections: {},
        errorRecoveryPatterns: {},
        deviceUsagePatterns: {},
        accessibilityNeeds: {}
      };
    }
    
    saveLearningData() {
      localStorage.setItem('adaptive-learning-data', JSON.stringify(this.learningData));
    }
    
    loadPreferences() {
      const saved = localStorage.getItem('adaptive-interface-preferences');
      return saved ? JSON.parse(saved) : {
        density: 'comfortable',
        animationLevel: 2,
        navigationStyle: 'sidebar',
        reduceMotion: false,
        highContrast: false,
        focusIndicators: false,
        autoAdaptations: true
      };
    }
    
    savePreferences() {
      localStorage.setItem('adaptive-interface-preferences', JSON.stringify(this.preferences));
    }
    
    setupEventListeners() {
      // Toggle adaptation panel
      this.adaptationToggle.addEventListener('click', this.toggleAdaptationPanel.bind(this));
      
      // Close panel when clicking outside
      document.addEventListener('click', (e) => {
        if (!e.target.closest('.adaptation-controls')) {
          this.adaptationPanel.classList.remove('panel-open');
        }
      });
      
      // Density options
      document.querySelectorAll('.density-btn').forEach(btn => {
        btn.addEventListener('click', this.handleDensityChange.bind(this));
      });
      
      // Animation level slider
      document.getElementById('animation-level').addEventListener('input', this.handleAnimationLevelChange.bind(this));
      
      // Navigation style options
      document.querySelectorAll('input[name="nav-style"]').forEach(input => {
        input.addEventListener('change', this.handleNavigationStyleChange.bind(this));
      });
      
      // Accessibility options
      ['reduce-motion', 'high-contrast', 'focus-indicators'].forEach(id => {
        document.getElementById(id).addEventListener('change', this.handleAccessibilityChange.bind(this));
      });
    }
    
    toggleAdaptationPanel() {
      this.adaptationPanel.classList.toggle('panel-open');
    }
    
    handleDensityChange(e) {
      const density = e.target.dataset.density;
      
      // Update UI
      document.querySelectorAll('.density-btn').forEach(btn => btn.classList.remove('active'));
      e.target.classList.add('active');
      
      // Apply density
      this.preferences.density = density;
      this.applyDensity(density);
      this.savePreferences();
      this.recordAdaptation('density', density);
    }
    
    handleAnimationLevelChange(e) {
      const level = parseInt(e.target.value);
      this.preferences.animationLevel = level;
      this.applyAnimationLevel(level);
      this.savePreferences();
      this.recordAdaptation('animation', level);
    }
    
    handleNavigationStyleChange(e) {
      const style = e.target.value;
      this.preferences.navigationStyle = style;
      this.applyNavigationStyle(style);
      this.savePreferences();
      this.recordAdaptation('navigation', style);
    }
    
    handleAccessibilityChange(e) {
      const option = e.target.id.replace('-', '');
      const isEnabled = e.target.checked;
      
      this.preferences[option] = isEnabled;
      this.applyAccessibilityOption(option, isEnabled);
      this.savePreferences();
      this.recordAdaptation('accessibility', `${option}:${isEnabled}`);
    }
    
    applyStoredPreferences() {
      // Apply density
      this.applyDensity(this.preferences.density);
      document.querySelector(`[data-density="${this.preferences.density}"]`)?.classList.add('active');
      
      // Apply animation level
      this.applyAnimationLevel(this.preferences.animationLevel);
      document.getElementById('animation-level').value = this.preferences.animationLevel;
      
      // Apply navigation style
      this.applyNavigationStyle(this.preferences.navigationStyle);
      document.querySelector(`input[value="${this.preferences.navigationStyle}"]`).checked = true;
      
      // Apply accessibility options
      ['reduceMotion', 'highContrast', 'focusIndicators'].forEach(option => {
        const kebabCase = option.replace(/([A-Z])/g, '-$1').toLowerCase();
        document.getElementById(kebabCase).checked = this.preferences[option];
        this.applyAccessibilityOption(option, this.preferences[option]);
      });
    }
    
    applyDensity(density) {
      document.documentElement.classList.remove('density-compact', 'density-comfortable', 'density-spacious');
      document.documentElement.classList.add(`density-${density}`);
      
      // Apply CSS custom properties based on density
      const densityValues = {
        compact: { spacing: '0.5rem', padding: '0.75rem', fontSize: '0.875rem' },
        comfortable: { spacing: '1rem', padding: '1rem', fontSize: '1rem' },
        spacious: { spacing: '1.5rem', padding: '1.25rem', fontSize: '1.125rem' }
      };
      
      const values = densityValues[density];
      document.documentElement.style.setProperty('--adaptive-spacing', values.spacing);
      document.documentElement.style.setProperty('--adaptive-padding', values.padding);
      document.documentElement.style.setProperty('--adaptive-font-size', values.fontSize);
    }
    
    applyAnimationLevel(level) {
      const animationClasses = ['no-animations', 'subtle-animations', 'normal-animations', 'rich-animations'];
      
      // Remove all animation classes
      animationClasses.forEach(cls => document.documentElement.classList.remove(cls));
      
      // Add the selected animation class
      document.documentElement.classList.add(animationClasses[level]);
      
      // Set CSS custom property for transition duration
      const durations = ['0ms', '150ms', '300ms', '500ms'];
      document.documentElement.style.setProperty('--adaptive-transition-duration', durations[level]);
    }
    
    applyNavigationStyle(style) {
      document.documentElement.classList.remove('nav-sidebar', 'nav-tabs', 'nav-breadcrumbs');
      document.documentElement.classList.add(`nav-${style}`);
      
      // Trigger navigation style change event
      window.dispatchEvent(new CustomEvent('navigationStyleChange', { detail: { style } }));
    }
    
    applyAccessibilityOption(option, isEnabled) {
      const className = `accessibility-${option.replace(/([A-Z])/g, '-$1').toLowerCase()}`;
      
      if (isEnabled) {
        document.documentElement.classList.add(className);
      } else {
        document.documentElement.classList.remove(className);
      }
      
      // Special handling for reduce motion
      if (option === 'reduceMotion') {
        document.documentElement.style.setProperty(
          '--adaptive-transition-duration', 
          isEnabled ? '0ms' : (this.preferences.animationLevel * 150 + 'ms')
        );
      }
      
      // Special handling for high contrast
      if (option === 'highContrast') {
        document.documentElement.style.setProperty(
          '--adaptive-contrast-ratio',
          isEnabled ? '4.5' : '3'
        );
      }
    }
    
    startBehaviorTracking() {
      // Track clicks and interactions
      document.addEventListener('click', this.trackInteraction.bind(this));
      document.addEventListener('keydown', this.trackKeyboardInteraction.bind(this));
      
      // Track scroll behavior
      let scrollTimeout;
      window.addEventListener('scroll', () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          this.trackScrollBehavior();
        }, 150);
      });
      
      // Track viewport changes
      window.addEventListener('resize', this.trackViewportChange.bind(this));
      
      // Track focus patterns
      document.addEventListener('focusin', this.trackFocusPattern.bind(this));
      
      // Track error recovery
      window.addEventListener('error', this.trackErrorRecovery.bind(this));
    }
    
    trackInteraction(e) {
      this.interactionCount++;
      
      const elementType = e.target.tagName.toLowerCase();
      const elementClass = e.target.className;
      const timestamp = Date.now();
      
      // Track click patterns
      if (!this.learningData.clickPatterns[elementType]) {
        this.learningData.clickPatterns[elementType] = [];
      }
      
      this.learningData.clickPatterns[elementType].push({
        class: elementClass,
        timestamp,
        coordinates: { x: e.clientX, y: e.clientY }
      });
      
      // Keep only recent data (last 100 interactions per element type)
      if (this.learningData.clickPatterns[elementType].length > 100) {
        this.learningData.clickPatterns[elementType] = 
          this.learningData.clickPatterns[elementType].slice(-100);
      }
      
      this.saveLearningData();
    }
    
    trackKeyboardInteraction(e) {
      // Track keyboard navigation patterns
      const key = e.key;
      const timestamp = Date.now();
      
      if (['Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', 'Space'].includes(key)) {
        if (!this.learningData.navigationPreferences.keyboard) {
          this.learningData.navigationPreferences.keyboard = [];
        }
        
        this.learningData.navigationPreferences.keyboard.push({
          key,
          timestamp,
          target: e.target.tagName.toLowerCase()
        });
        
        // Auto-suggest accessibility improvements for heavy keyboard users
        if (this.learningData.navigationPreferences.keyboard.length > 50 && 
            !this.preferences.focusIndicators) {
          this.suggestAdaptation('focus-indicators', 'Enhanced focus indicators recommended for keyboard navigation');
        }
      }
    }
    
    trackScrollBehavior() {
      const scrollY = window.scrollY;
      const timestamp = Date.now();
      
      if (!this.learningData.scrollBehavior.patterns) {
        this.learningData.scrollBehavior.patterns = [];
      }
      
      this.learningData.scrollBehavior.patterns.push({
        position: scrollY,
        timestamp,
        viewport: { width: window.innerWidth, height: window.innerHeight }
      });
      
      // Keep only recent scroll data
      if (this.learningData.scrollBehavior.patterns.length > 200) {
        this.learningData.scrollBehavior.patterns = 
          this.learningData.scrollBehavior.patterns.slice(-200);
      }
      
      // Analyze scroll patterns for adaptations
      this.analyzeScrollPatterns();
    }
    
    trackViewportChange() {
      const viewport = { width: window.innerWidth, height: window.innerHeight };
      
      if (!this.learningData.deviceUsagePatterns.viewports) {
        this.learningData.deviceUsagePatterns.viewports = [];
      }
      
      this.learningData.deviceUsagePatterns.viewports.push({
        ...viewport,
        timestamp: Date.now()
      });
      
      // Auto-suggest density changes based on viewport
      if (viewport.width < 768 && this.preferences.density !== 'compact') {
        this.suggestAdaptation('density', 'Compact density recommended for mobile devices');
      } else if (viewport.width > 1200 && this.preferences.density !== 'spacious') {
        this.suggestAdaptation('density', 'Spacious density available for large screens');
      }
    }
    
    trackFocusPattern(e) {
      const elementType = e.target.tagName.toLowerCase();
      const timestamp = Date.now();
      
      if (!this.learningData.accessibilityNeeds.focusPatterns) {
        this.learningData.accessibilityNeeds.focusPatterns = [];
      }
      
      this.learningData.accessibilityNeeds.focusPatterns.push({
        element: elementType,
        timestamp
      });
    }
    
    trackErrorRecovery(e) {
      const errorInfo = {
        message: e.message,
        filename: e.filename,
        lineno: e.lineno,
        timestamp: Date.now()
      };
      
      if (!this.learningData.errorRecoveryPatterns.errors) {
        this.learningData.errorRecoveryPatterns.errors = [];
      }
      
      this.learningData.errorRecoveryPatterns.errors.push(errorInfo);
    }
    
    analyzeScrollPatterns() {
      const patterns = this.learningData.scrollBehavior.patterns;
      if (patterns.length < 10) return;
      
      // Analyze scroll speed and suggest animation adjustments
      const recentPatterns = patterns.slice(-10);
      const scrollSpeeds = [];
      
      for (let i = 1; i < recentPatterns.length; i++) {
        const timeDiff = recentPatterns[i].timestamp - recentPatterns[i-1].timestamp;
        const positionDiff = Math.abs(recentPatterns[i].position - recentPatterns[i-1].position);
        
        if (timeDiff > 0) {
          scrollSpeeds.push(positionDiff / timeDiff);
        }
      }
      
      const avgScrollSpeed = scrollSpeeds.reduce((a, b) => a + b, 0) / scrollSpeeds.length;
      
      // Suggest reduce motion for very fast scrolling
      if (avgScrollSpeed > 2 && !this.preferences.reduceMotion) {
        this.suggestAdaptation('reduce-motion', 'Reduced motion recommended for smoother scrolling');
      }
    }
    
    startAdaptationEngine() {
      // Run adaptation analysis every 2 minutes
      this.adaptationTimer = setInterval(() => {
        this.runAdaptationAnalysis();
      }, 120000);
      
      // Initial analysis after 30 seconds
      setTimeout(() => {
        this.runAdaptationAnalysis();
      }, 30000);
    }
    
    runAdaptationAnalysis() {
      if (!this.isAdaptationEnabled) return;
      
      this.updateAdaptationStatus('analyzing');
      
      // Analyze interaction patterns
      this.analyzeInteractionPatterns();
      
      // Analyze device usage
      this.analyzeDeviceUsage();
      
      // Analyze accessibility needs
      this.analyzeAccessibilityNeeds();
      
      setTimeout(() => {
        this.updateAdaptationStatus('learning');
      }, 2000);
    }
    
    analyzeInteractionPatterns() {
      // Analyze click accuracy and suggest interface adjustments
      const clickPatterns = this.learningData.clickPatterns;
      
      Object.keys(clickPatterns).forEach(elementType => {
        const patterns = clickPatterns[elementType];
        if (patterns.length < 10) return;
        
        // Check for click accuracy issues
        const recentClicks = patterns.slice(-20);
        const clickVariance = this.calculateClickVariance(recentClicks);
        
        if (clickVariance > 100 && this.preferences.density !== 'spacious') {
          this.suggestAdaptation('density', 'Larger touch targets recommended for better accuracy');
        }
      });
    }
    
    analyzeDeviceUsage() {
      const viewports = this.learningData.deviceUsagePatterns.viewports || [];
      if (viewports.length < 5) return;
      
      const recentViewports = viewports.slice(-10);
      const avgWidth = recentViewports.reduce((sum, vp) => sum + vp.width, 0) / recentViewports.length;
      
      // Suggest density based on average viewport
      if (avgWidth < 500 && this.preferences.density !== 'compact') {
        this.suggestAdaptation('density', 'Compact density recommended for small screens');
      } else if (avgWidth > 1400 && this.preferences.density !== 'spacious') {
        this.suggestAdaptation('density', 'Spacious density available for large displays');
      }
    }
    
    analyzeAccessibilityNeeds() {
      const focusPatterns = this.learningData.accessibilityNeeds.focusPatterns || [];
      const keyboardNav = this.learningData.navigationPreferences.keyboard || [];
      
      // Heavy keyboard usage suggests need for enhanced focus indicators
      if (keyboardNav.length > 30 && !this.preferences.focusIndicators) {
        this.suggestAdaptation('focus-indicators', 'Enhanced focus indicators recommended for keyboard navigation');
      }
      
      // Frequent focus changes suggest need for reduced motion
      if (focusPatterns.length > 50 && !this.preferences.reduceMotion) {
        this.suggestAdaptation('reduce-motion', 'Reduced motion may improve focus management');
      }
    }
    
    calculateClickVariance(clicks) {
      if (clicks.length < 2) return 0;
      
      const avgX = clicks.reduce((sum, click) => sum + click.coordinates.x, 0) / clicks.length;
      const avgY = clicks.reduce((sum, click) => sum + click.coordinates.y, 0) / clicks.length;
      
      const variance = clicks.reduce((sum, click) => {
        const dx = click.coordinates.x - avgX;
        const dy = click.coordinates.y - avgY;
        return sum + (dx * dx + dy * dy);
      }, 0) / clicks.length;
      
      return Math.sqrt(variance);
    }
    
    suggestAdaptation(type, message) {
      // Create subtle notification for suggested adaptations
      const notification = document.createElement('div');
      notification.className = 'adaptation-suggestion';
      notification.innerHTML = `
        <div class="suggestion-content">
          <div class="suggestion-icon">💡</div>
          <div class="suggestion-text">
            <strong>Interface Suggestion</strong>
            <p>${message}</p>
          </div>
          <div class="suggestion-actions">
            <button class="suggestion-apply" data-type="${type}">Apply</button>
            <button class="suggestion-dismiss">Dismiss</button>
          </div>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Auto-remove after 10 seconds
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, 10000);
      
      // Handle suggestion actions
      notification.querySelector('.suggestion-apply').addEventListener('click', () => {
        this.applySuggestedAdaptation(type);
        notification.remove();
      });
      
      notification.querySelector('.suggestion-dismiss').addEventListener('click', () => {
        notification.remove();
      });
    }
    
    applySuggestedAdaptation(type) {
      switch (type) {
        case 'density':
          if (window.innerWidth < 600) {
            this.handleDensityChange({ target: { dataset: { density: 'compact' } } });
          } else if (window.innerWidth > 1400) {
            this.handleDensityChange({ target: { dataset: { density: 'spacious' } } });
          }
          break;
        case 'reduce-motion':
          document.getElementById('reduce-motion').checked = true;
          this.handleAccessibilityChange({ target: { id: 'reduce-motion', checked: true } });
          break;
        case 'focus-indicators':
          document.getElementById('focus-indicators').checked = true;
          this.handleAccessibilityChange({ target: { id: 'focus-indicators', checked: true } });
          break;
      }
      
      this.recordAdaptation('suggestion', type);
    }
    
    recordAdaptation(category, value) {
      this.adaptationCount++;
      console.log(`Adaptation applied: ${category} = ${value}`);
    }
    
    updateAdaptationStatus(status) {
      const statusMap = {
        learning: { text: 'Learning', color: '#10b981' },
        analyzing: { text: 'Analyzing', color: '#f59e0b' },
        adapting: { text: 'Adapting', color: '#8b5cf6' },
        idle: { text: 'Idle', color: '#6b7280' }
      };
      
      const statusInfo = statusMap[status] || statusMap.idle;
      this.adaptationMode.textContent = statusInfo.text;
      this.adaptationDot.style.backgroundColor = statusInfo.color;
    }
    
    updateStats() {
      const sessionDuration = Math.floor((Date.now() - this.sessionStart) / 60000); // minutes
      document.getElementById('session-time').textContent = `${sessionDuration}m`;
      document.getElementById('interaction-count').textContent = this.interactionCount;
      document.getElementById('adaptation-count').textContent = this.adaptationCount;
    }
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new AdaptiveInterface();
  });
</script>

<style>
  .adaptive-system {
    position: relative;
  }
  
  .adaptation-controls {
    position: fixed;
    bottom: 5rem;
    right: 1.5rem;
    z-index: 9998;
  }
  
  .adaptation-button {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
    padding: var(--premium-space-sm) var(--premium-space-md);
    background: var(--premium-glass);
    backdrop-filter: blur(10px);
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-full);
    color: var(--premium-gray-700);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
    font-size: 0.8rem;
    font-weight: 500;
    box-shadow: var(--premium-shadow-lg);
  }
  
  .adaptation-button:hover {
    background: var(--premium-primary);
    color: white;
    transform: translateY(-2px);
    box-shadow: var(--premium-shadow-xl);
  }
  
  .adaptation-panel {
    position: absolute;
    bottom: calc(100% + var(--premium-space-sm));
    right: 0;
    width: 350px;
    max-height: 500px;
    background: white;
    border: 1px solid var(--premium-glass-border);
    border-radius: var(--premium-radius-lg);
    box-shadow: var(--premium-shadow-xl);
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px) scale(0.95);
    transition: all var(--premium-transition-normal);
    overflow: hidden;
  }
  
  .panel-open {
    opacity: 1;
    visibility: visible;
    transform: translateY(0) scale(1);
  }
  
  .panel-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--premium-space-lg);
    background: var(--premium-gradient-subtle);
    border-bottom: 1px solid var(--premium-glass-border);
  }
  
  .panel-header h4 {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .adaptation-indicator {
    display: flex;
    align-items: center;
    gap: var(--premium-space-xs);
    font-size: 0.8rem;
    color: var(--premium-gray-600);
  }
  
  .indicator-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #10b981;
    animation: pulse 2s ease-in-out infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.6; transform: scale(1.2); }
  }
  
  .adaptation-options {
    padding: var(--premium-space-lg);
    max-height: 300px;
    overflow-y: auto;
  }
  
  .option-group {
    margin-bottom: var(--premium-space-lg);
  }
  
  .option-group:last-child {
    margin-bottom: 0;
  }
  
  .option-group > label {
    display: block;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--premium-gray-800);
    margin-bottom: var(--premium-space-sm);
  }
  
  .density-options {
    display: flex;
    gap: var(--premium-space-xs);
  }
  
  .density-btn {
    flex: 1;
    padding: var(--premium-space-xs) var(--premium-space-sm);
    background: var(--premium-gray-100);
    border: 1px solid var(--premium-gray-200);
    border-radius: var(--premium-radius-md);
    font-size: 0.8rem;
    color: var(--premium-gray-700);
    cursor: pointer;
    transition: all var(--premium-transition-normal);
  }
  
  .density-btn:hover {
    background: var(--premium-gray-200);
  }
  
  .density-btn.active {
    background: var(--premium-primary);
    color: white;
    border-color: var(--premium-primary);
  }
  
  .animation-slider {
    position: relative;
  }
  
  .animation-slider input[type="range"] {
    width: 100%;
    height: 4px;
    background: var(--premium-gray-200);
    border-radius: 2px;
    outline: none;
    -webkit-appearance: none;
  }
  
  .animation-slider input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 16px;
    height: 16px;
    background: var(--premium-primary);
    border-radius: 50%;
    cursor: pointer;
  }
  
  .slider-labels {
    display: flex;
    justify-content: space-between;
    margin-top: var(--premium-space-xs);
    font-size: 0.7rem;
    color: var(--premium-gray-500);
  }
  
  .nav-style-options {
    display: flex;
    flex-direction: column;
    gap: var(--premium-space-sm);
  }
  
  .radio-option, .checkbox-option {
    display: flex;
    align-items: center;
    gap: var(--premium-space-sm);
    font-size: 0.875rem;
    color: var(--premium-gray-700);
    cursor: pointer;
  }
  
  .radio-option input, .checkbox-option input {
    margin: 0;
  }
  
  .adaptation-stats {
    border-top: 1px solid var(--premium-gray-200);
    padding: var(--premium-space-md) var(--premium-space-lg);
    background: var(--premium-gray-50);
  }
  
  .adaptation-stats h5 {
    margin: 0 0 var(--premium-space-sm);
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--premium-gray-800);
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--premium-space-sm);
  }
  
  .stat-item {
    text-align: center;
  }
  
  .stat-label {
    display: block;
    font-size: 0.7rem;
    color: var(--premium-gray-600);
    margin-bottom: 2px;
  }
  
  .stat-value {
    display: block;
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--premium-primary);
  }
  
  /* Adaptation Suggestions */
  .adaptation-suggestion {
    position: fixed;
    top: 20px;
    right: 20px;
    max-width: 350px;
    background: white;
    border: 1px solid var(--premium-glass-border);
    border-left: 4px solid var(--premium-primary);
    border-radius: var(--premium-radius-lg);
    box-shadow: var(--premium-shadow-xl);
    z-index: 10001;
    animation: suggestionSlideIn 0.5s ease-out;
  }
  
  @keyframes suggestionSlideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  .suggestion-content {
    padding: var(--premium-space-md);
  }
  
  .suggestion-content {
    display: flex;
    gap: var(--premium-space-sm);
  }
  
  .suggestion-icon {
    font-size: 1.2rem;
    flex-shrink: 0;
  }
  
  .suggestion-text {
    flex: 1;
  }
  
  .suggestion-text strong {
    display: block;
    font-size: 0.875rem;
    color: var(--premium-gray-800);
    margin-bottom: 2px;
  }
  
  .suggestion-text p {
    margin: 0;
    font-size: 0.8rem;
    color: var(--premium-gray-600);
    margin-bottom: var(--premium-space-sm);
  }
  
  .suggestion-actions {
    display: flex;
    gap: var(--premium-space-xs);
  }
  
  .suggestion-apply, .suggestion-dismiss {
    padding: var(--premium-space-xs) var(--premium-space-sm);
    border-radius: var(--premium-radius-sm);
    font-size: 0.8rem;
    cursor: pointer;
    transition: all var(--premium-transition-fast);
  }
  
  .suggestion-apply {
    background: var(--premium-primary);
    color: white;
    border: none;
  }
  
  .suggestion-apply:hover {
    background: var(--premium-primary-dark);
  }
  
  .suggestion-dismiss {
    background: var(--premium-gray-100);
    color: var(--premium-gray-700);
    border: 1px solid var(--premium-gray-200);
  }
  
  .suggestion-dismiss:hover {
    background: var(--premium-gray-200);
  }
  
  /* Adaptive Interface Classes */
  :root {
    --adaptive-spacing: 1rem;
    --adaptive-padding: 1rem;
    --adaptive-font-size: 1rem;
    --adaptive-transition-duration: 300ms;
    --adaptive-contrast-ratio: 3;
  }
  
  /* Density Adaptations */
  .density-compact {
    --premium-space-xs: 0.25rem;
    --premium-space-sm: 0.5rem;
    --premium-space-md: 0.75rem;
    --premium-space-lg: 1rem;
    --premium-space-xl: 1.25rem;
  }
  
  .density-spacious {
    --premium-space-xs: 0.75rem;
    --premium-space-sm: 1rem;
    --premium-space-md: 1.5rem;
    --premium-space-lg: 2rem;
    --premium-space-xl: 2.5rem;
  }
  
  /* Animation Level Adaptations */
  .no-animations * {
    animation: none !important;
    transition: none !important;
  }
  
  .subtle-animations {
    --premium-transition-fast: 100ms;
    --premium-transition-normal: 150ms;
    --premium-transition-slow: 200ms;
  }
  
  .rich-animations {
    --premium-transition-fast: 200ms;
    --premium-transition-normal: 400ms;
    --premium-transition-slow: 600ms;
  }
  
  /* Accessibility Adaptations */
  .accessibility-reduce-motion *,
  .accessibility-reduce-motion *::before,
  .accessibility-reduce-motion *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
  
  .accessibility-high-contrast {
    filter: contrast(1.5);
  }
  
  .accessibility-focus-indicators *:focus-visible {
    outline: 3px solid var(--premium-primary) !important;
    outline-offset: 3px !important;
    box-shadow: 0 0 0 6px rgba(var(--premium-primary-rgb), 0.2) !important;
  }
  
  /* Mobile responsive */
  @media (max-width: 768px) {
    .adaptation-panel {
      width: 300px;
    }
    
    .adaptation-controls {
      bottom: 4rem;
      right: 1rem;
    }
    
    .adaptation-suggestion {
      left: 10px;
      right: 10px;
      max-width: none;
    }
  }
  
  /* Dark mode */
  [data-theme="dark"] .adaptation-panel {
    background: var(--premium-gray-800);
    border-color: var(--premium-gray-700);
  }
  
  [data-theme="dark"] .panel-header {
    background: var(--premium-gray-900);
    border-color: var(--premium-gray-700);
  }
  
  [data-theme="dark"] .panel-header h4 {
    color: var(--premium-gray-200);
  }
  
  [data-theme="dark"] .adaptation-stats {
    background: var(--premium-gray-700);
    border-color: var(--premium-gray-600);
  }
  
  [data-theme="dark"] .adaptation-suggestion {
    background: var(--premium-gray-800);
    border-color: var(--premium-gray-700);
  }
  
  [data-theme="dark"] .suggestion-text strong {
    color: var(--premium-gray-200);
  }
</style>