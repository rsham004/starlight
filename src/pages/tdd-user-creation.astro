---
// TDD approach to diagnose user creation issues
---

<html>
<head>
    <title>TDD User Creation Tests</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 2rem auto; padding: 2rem; }
        .test-section { background: #f8f9fa; padding: 1rem; margin: 1rem 0; border-radius: 4px; border-left: 4px solid #007bff; }
        .test-result { background: #fff; padding: 1rem; margin: 0.5rem 0; border-radius: 4px; border: 1px solid #ddd; }
        .success { border-left-color: #28a745; }
        .error { border-left-color: #dc3545; }
        button { background: #007bff; color: white; padding: 0.5rem 1rem; border: none; border-radius: 4px; cursor: pointer; margin: 0.25rem; }
        input { padding: 0.5rem; margin: 0.25rem; border: 1px solid #ddd; border-radius: 4px; width: 200px; }
        pre { background: #f8f9fa; padding: 1rem; border-radius: 4px; overflow-x: auto; font-size: 0.9em; }
    </style>
</head>
<body>
    <h1>TDD User Creation Diagnostic</h1>
    
    <div class="test-section">
        <h2>Test 1: Direct Backend API Creation</h2>
        <p>This bypasses all frontend components and creates users directly via Clerk's REST API.</p>
        
        <div>
            <input type="email" id="test1-email" placeholder="Email (e.g., api-test@example.com)" value="apitest@productfoundry.ai">
            <input type="password" id="test1-password" placeholder="Password" value="TestPassword123!">
            <button onclick="runTest1()">Test Backend API Creation</button>
        </div>
        
        <div id="test1-result" class="test-result" style="display: none;"></div>
    </div>

    <div class="test-section">
        <h2>Test 2: Frontend Component Error Capture</h2>
        <p>Test the actual sign-up component with detailed error logging.</p>
        
        <div>
            <input type="email" id="test2-email" placeholder="Email" value="frontend-test@productfoundry.ai">
            <button onclick="runTest2()">Test Frontend Component</button>
        </div>
        
        <div id="test2-result" class="test-result" style="display: none;"></div>
    </div>

    <div class="test-section">
        <h2>Test 3: Email Domain Validation</h2>
        <p>Test different email domains to identify restrictions.</p>
        
        <div>
            <button onclick="runTest3('@productfoundry.ai')">Test @productfoundry.ai</button>
            <button onclick="runTest3('@gmail.com')">Test @gmail.com</button>
            <button onclick="runTest3('@example.com')">Test @example.com</button>
        </div>
        
        <div id="test3-result" class="test-result" style="display: none;"></div>
    </div>

    <div class="test-section">
        <h2>Current Users Check</h2>
        <button onclick="checkUsers()">Refresh User Count</button>
        <div id="users-result" class="test-result" style="display: none;"></div>
    </div>

    <script>
        async function runTest1() {
            const email = document.getElementById('test1-email').value;
            const password = document.getElementById('test1-password').value;
            const resultDiv = document.getElementById('test1-result');
            
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = '<p>üîÑ Testing direct API creation...</p>';
            
            try {
                const response = await fetch('/api/test-create-user', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, password })
                });
                
                const result = await response.json();
                
                let html = `<h3>Test 1 Results:</h3>`;
                html += `<p><strong>Success:</strong> ${result.success ? '‚úÖ Yes' : '‚ùå No'}</p>`;
                html += `<p><strong>Status:</strong> ${result.status} ${result.statusText}</p>`;
                
                if (result.userCreated) {
                    html += `<p>‚úÖ <strong>User Created!</strong> ID: ${result.userCreated}</p>`;
                    html += `<p>üîç Check Clerk Dashboard now for user: ${email}</p>`;
                } else if (result.data) {
                    html += `<p>‚ùå <strong>Creation Failed</strong></p>`;
                    html += `<pre>${JSON.stringify(result.data, null, 2)}</pre>`;
                }
                
                resultDiv.innerHTML = html;
                resultDiv.className = `test-result ${result.success ? 'success' : 'error'}`;
                
            } catch (error) {
                resultDiv.innerHTML = `<p>‚ùå <strong>Error:</strong> ${error.message}</p>`;
                resultDiv.className = 'test-result error';
            }
        }

        async function runTest2() {
            const resultDiv = document.getElementById('test2-result');
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = '<p>üîÑ Frontend component test not yet implemented...</p>';
        }

        async function runTest3(domain) {
            const resultDiv = document.getElementById('test3-result');
            resultDiv.style.display = 'block';
            
            const email = `test-${Date.now()}${domain}`;
            const password = 'TestPassword123!';
            
            resultDiv.innerHTML = `<p>üîÑ Testing domain: ${domain} with email: ${email}</p>`;
            
            try {
                const response = await fetch('/api/test-create-user', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, password })
                });
                
                const result = await response.json();
                
                let html = `<h3>Domain Test: ${domain}</h3>`;
                html += `<p><strong>Email:</strong> ${email}</p>`;
                html += `<p><strong>Success:</strong> ${result.success ? '‚úÖ Yes' : '‚ùå No'}</p>`;
                html += `<p><strong>Status:</strong> ${result.status}</p>`;
                
                if (result.data && !result.success) {
                    html += `<pre>${JSON.stringify(result.data, null, 2)}</pre>`;
                }
                
                resultDiv.innerHTML += html + '<hr>';
                
            } catch (error) {
                resultDiv.innerHTML += `<p>‚ùå Error testing ${domain}: ${error.message}</p><hr>`;
            }
        }

        async function checkUsers() {
            const resultDiv = document.getElementById('users-result');
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = '<p>üîÑ Checking current users...</p>';
            
            try {
                const response = await fetch('/api/clerk-test');
                const result = await response.json();
                
                resultDiv.innerHTML = `
                    <h3>Current Users in Clerk:</h3>
                    <p><strong>Total Users:</strong> ${result.apiTest?.userCount || 0}</p>
                    ${result.apiTest?.firstUser ? 
                        `<p><strong>Sample User:</strong> ${result.apiTest.firstUser.email}</p>` : 
                        '<p>No users found</p>'
                    }
                `;
                
            } catch (error) {
                resultDiv.innerHTML = `<p>‚ùå Error: ${error.message}</p>`;
            }
        }
    </script>
</body>
</html>