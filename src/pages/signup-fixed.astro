---
const publishableKey = import.meta.env.PUBLIC_CLERK_PUBLISHABLE_KEY;
---

<html>
<head>
    <title>Fixed Sign-Up Test</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Use a specific stable version instead of @latest -->
    <script 
        crossorigin 
        data-clerk-publishable-key={publishableKey}
        src="https://unpkg.com/@clerk/clerk-js@4.70.5/dist/clerk.browser.js"
        type="text/javascript"
    ></script>
</head>
<body>
    <div style="max-width: 500px; margin: 2rem auto; padding: 2rem;">
        <h1>Fixed Sign-Up Test</h1>
        
        <div id="sign-up-container" style="margin: 2rem 0;"></div>
        
        <div id="debug-log" style="background: #f8f9fa; padding: 1rem; margin: 1rem 0; border-radius: 4px; max-height: 200px; overflow-y: auto;">
            <h3>Debug Log:</h3>
            <div id="log-content">Initializing...</div>
        </div>
        
        <div style="background: #e7f3ff; padding: 1rem; margin: 1rem 0; border-radius: 4px;">
            <p><strong>Test Email Suggestions:</strong></p>
            <ul>
                <li><code>testuser@productfoundry.ai</code></li>
                <li><code>demo@productfoundry.ai</code></li>
                <li><code>signup-test@example.com</code></li>
            </ul>
        </div>
        
        <p><a href="/">Back to Home</a></p>
    </div>
    
    <script>
        function addLog(message) {
            const logContent = document.getElementById('log-content');
            const timestamp = new Date().toLocaleTimeString();
            logContent.innerHTML += `<div>[${timestamp}] ${message}</div>`;
            logContent.scrollTop = logContent.scrollHeight;
        }
        
        // Wait for DOM to be fully loaded
        document.addEventListener('DOMContentLoaded', async () => {
            addLog('üîÑ DOM loaded, waiting for Clerk...');
            
            // Wait for Clerk to be available
            let attempts = 0;
            const maxAttempts = 10;
            
            const waitForClerk = () => {
                return new Promise((resolve, reject) => {
                    const checkClerk = () => {
                        attempts++;
                        if (window.Clerk) {
                            addLog('‚úÖ Clerk available');
                            resolve(window.Clerk);
                        } else if (attempts >= maxAttempts) {
                            reject(new Error('Clerk failed to load after 10 attempts'));
                        } else {
                            addLog(`‚è≥ Waiting for Clerk... (attempt ${attempts})`);
                            setTimeout(checkClerk, 500);
                        }
                    };
                    checkClerk();
                });
            };
            
            try {
                const clerk = await waitForClerk();
                addLog('üöÄ Initializing Clerk...');
                
                await clerk.load();
                
                addLog('‚úÖ Clerk loaded successfully');
                addLog(`üìã Publishable key confirmed: ${clerk.publishableKey?.substring(0, 20)}...`);
                
                // Simple event handling
                clerk.addListener('user', (user) => {
                    if (user) {
                        addLog(`üéâ SUCCESS! User created:`);
                        addLog(`üë§ ID: ${user.id}`);
                        addLog(`üìß Email: ${user.emailAddresses?.[0]?.emailAddress || 'No email'}`);
                        addLog(`üîç CHECK CLERK DASHBOARD NOW!`);
                    }
                });
                
                // Mount the sign-up component with error handling
                const container = document.getElementById('sign-up-container');
                
                try {
                    clerk.mountSignUp(container, {
                        routing: 'hash',
                        afterSignUpUrl: window.location.origin,
                        appearance: {
                            elements: {
                                socialButtonsBlockButton: { display: 'none' },
                                dividerRow: { display: 'none' }
                            }
                        }
                    });
                    addLog('‚úÖ Sign-up form mounted successfully');
                } catch (mountError) {
                    addLog(`‚ùå Mount error: ${mountError.message}`);
                    console.error('Mount error:', mountError);
                }
                
            } catch (error) {
                addLog(`‚ùå Clerk initialization error: ${error.message}`);
                console.error('Clerk error:', error);
            }
        });
    </script>
</body>
</html>